-- ISE.SM.Model.Account
CREATE TABLE "ACCOUNT" (
    "USERNAME" VARCHAR2(20) NOT NULL,       -- _username
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "USER_ID" NUMBER(15) NOT NULL,          -- _securityuser
    "PASSWORD" VARCHAR2(100) NOT NULL,      -- _password
    "PASS_CHANGE_DATE" CHAR(8) NULL,        -- _passchangedate
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "EXPIRED_DATE" DATE NULL,               -- _expireddate
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    "DESCRIPTION" NVARCHAR2(100) NULL,      -- _description
    "ACCOUNT_ID" NUMBER(15) NOT NULL,       -- _accountid
    CONSTRAINT "pk_ACCOUNT" PRIMARY KEY ("ACCOUNT_ID")
);

CREATE SEQUENCE "Seq_ACCOUNT_ACCOUNT_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_ACCOUNT_ACCOUNT_ID"  BEFORE INSERT ON "ACCOUNT"  FOR EACH ROW   BEGIN  SELECT "Seq_ACCOUNT_ACCOUNT_ID".nextval INTO :NEW."ACCOUNT_ID" FROM dual;  END;;

-- ISE.SM.Model.AccountToAppDomain
CREATE TABLE "ACCOUNT_TO_APP_DOMAIN" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "EXPIRE_DATE" DATE NULL,                -- _expiredate
    "APP_DOMAIN_ID" NUMBER(6) NOT NULL,     -- _applicationdomain
    "ACCOUNT_ID" NUMBER(15) NOT NULL,       -- _account
    "ACC_AAPDOMAIN_ID" NUMBER(15) NOT NULL, -- _accaapdomainid
    CONSTRAINT "pk_ACCOUNT_TO_APP_DOMAIN" PRIMARY KEY ("ACC_AAPDOMAIN_ID")
);

CREATE SEQUENCE "Sq_ACCOUNT_TO_APP_DOMAIN_ACC_A"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_ACCOUNT_TO_APP_DOMAIN_ACC_"  BEFORE INSERT ON "ACCOUNT_TO_APP_DOMAIN"  FOR EACH ROW   BEGIN  SELECT "Sq_ACCOUNT_TO_APP_DOMAIN_ACC_A".nextval INTO :NEW."ACC_AAPDOMAIN_ID" FROM dual;  END;;

-- ISE.SM.Model.ApplicationDomain
CREATE TABLE "APPLICATION_DOMAIN" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "TITLE" VARCHAR2(50) NULL,              -- _title
    "LOGIN_TYPE_ID" NUMBER(3) NULL,         -- _logintype
    "LOCKED" NUMBER(1) NULL,                -- _locked
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    "APPLICATION_DOMAIN_ID" NUMBER(6) NOT NULL, -- _applicationdomainid
    CONSTRAINT "pk_APPLICATION_DOMAIN" PRIMARY KEY ("APPLICATION_DOMAIN_ID")
);

CREATE SEQUENCE "Sq_APPLICATION_DOMAIN_APPLICAT"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_APPLICATION_DOMAIN_APPLICA"  BEFORE INSERT ON "APPLICATION_DOMAIN"  FOR EACH ROW   BEGIN  SELECT "Sq_APPLICATION_DOMAIN_APPLICAT".nextval INTO :NEW."APPLICATION_DOMAIN_ID" FROM dual;  END;;

-- ISE.SM.Model.GroupToGroup
CREATE TABLE "GROUP_TO_GROUP" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "PARENT_GROUP_ID" NUMBER(6) NULL,       -- _securitygroup1
    "CHILD_GROUP_ID" NUMBER(6) NULL,        -- _securitygroup
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "GG_ID" NUMBER(6) NOT NULL,             -- _ggid
    CONSTRAINT "pk_GROUP_TO_GROUP" PRIMARY KEY ("GG_ID")
);

CREATE SEQUENCE "Seq_GROUP_TO_GROUP_GG_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_GROUP_TO_GROUP_GG_ID"  BEFORE INSERT ON "GROUP_TO_GROUP"  FOR EACH ROW   BEGIN  SELECT "Seq_GROUP_TO_GROUP_GG_ID".nextval INTO :NEW."GG_ID" FROM dual;  END;;

-- ISE.SM.Model.LoginType
CREATE TABLE "LOGIN_TYPE" (
    "TITLE" VARCHAR2(50) NULL,              -- _title
    "LOGIN_TYPE_ID" NUMBER(3) NOT NULL,     -- _logintypeid
    "DESCRIPTION" VARCHAR2(50) NULL,        -- _description
    CONSTRAINT "pk_LOGIN_TYPE" PRIMARY KEY ("LOGIN_TYPE_ID")
);

-- ISE.SM.Model.ManagementAccount
CREATE TABLE "MANAGEMENT_ACCOUNT" (
    "USER_NAME" VARCHAR2(20) NOT NULL,      -- _username
    "SECURITY_USER_ID" NUMBER(15) NOT NULL, -- _securityuser
    "PERSONEL_CODE" VARCHAR2(20) NULL,      -- _personelcode
    "PASSWORD" VARCHAR2(20) NOT NULL,       -- _password
    "MANAGEMENT_ROLE_ID" NUMBER(6) NULL,    -- _managementrole
    "MANAGEMENT_ACCOUNT_ID" NUMBER(6) NOT NULL, -- _managementaccountid
    "EXPIRE_DATE" DATE NULL,                -- _expiredate
    CONSTRAINT "pk_MANAGEMENT_ACCOUNT" PRIMARY KEY ("MANAGEMENT_ACCOUNT_ID")
);

CREATE SEQUENCE "Sq_MANAGEMENT_ACCOUNT_MANAGEME"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_MANAGEMENT_ACCOUNT_MANAGEM"  BEFORE INSERT ON "MANAGEMENT_ACCOUNT"  FOR EACH ROW   BEGIN  SELECT "Sq_MANAGEMENT_ACCOUNT_MANAGEME".nextval INTO :NEW."MANAGEMENT_ACCOUNT_ID" FROM dual;  END;;

-- ISE.SM.Model.ManagementLog
CREATE TABLE "MANAGEMENT_LOG" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "STATUES" NUMBER(2) NULL,               -- _statues
    "SERVICE" VARCHAR2(50) NULL,            -- _service
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "MESSAGE" VARCHAR2(200) NULL,           -- _message
    "MANAGEMENT_LOG_ID" NUMBER(15) NOT NULL, -- _managementlogid
    "LOG_TYPE" NUMBER(2) NULL,              -- _logtype
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_MANAGEMENT_LOG" PRIMARY KEY ("MANAGEMENT_LOG_ID")
);

-- ISE.SM.Model.ManagementRole
CREATE TABLE "MANAGEMENT_ROLE" (
    "TITLE" VARCHAR2(50) NULL,              -- _title
    "MANAGEMENT_ROLE_ID" NUMBER(6) NOT NULL, -- _managementroleid
    "IS_ACTIVE" NUMBER(1) NULL,             -- _isactive
    "DESCRIPTION" VARCHAR2(100) NULL,       -- _description
    CONSTRAINT "pk_MANAGEMENT_ROLE" PRIMARY KEY ("MANAGEMENT_ROLE_ID")
);

CREATE SEQUENCE "Sq_MANAGEMENT_ROLE_MANAGEMENT_"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_MANAGEMENT_ROLE_MANAGEMENT"  BEFORE INSERT ON "MANAGEMENT_ROLE"  FOR EACH ROW   BEGIN  SELECT "Sq_MANAGEMENT_ROLE_MANAGEMENT_".nextval INTO :NEW."MANAGEMENT_ROLE_ID" FROM dual;  END;;

-- ISE.SM.Model.Operation
CREATE TABLE "OPERATION" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "OPERATION_NAME" VARCHAR2(50) NOT NULL, -- _operationname
    "OPERATION_ID" NUMBER(15) NOT NULL,     -- _operationid
    "IS_DEFAULT" NUMBER(1) NULL,            -- _isdefault
    "IS_ACTION_ID" NUMBER(1) NULL,          -- _isactionid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "DISPLAY_NAME" VARCHAR2(100) NULL,      -- _displayname
    "DESCRIPTION" VARCHAR2(100) NULL,       -- _description
    CONSTRAINT "pk_OPERATION" PRIMARY KEY ("OPERATION_ID")
);

CREATE SEQUENCE "Seq_OPERATION_OPERATION_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_OPERATION_OPERATION_ID"  BEFORE INSERT ON "OPERATION"  FOR EACH ROW   BEGIN  SELECT "Seq_OPERATION_OPERATION_ID".nextval INTO :NEW."OPERATION_ID" FROM dual;  END;;

-- ISE.SM.Model.OperationConstraint
CREATE TABLE "OPERATION_CONSTRAINT" (
    "OPERATION_CONSTRAINT_ID" NUMBER(15) NOT NULL, -- _operationconstraintid
    "SRC_OPERATION_ID" NUMBER(15) NULL,     -- _operation1
    "DEST_OPERATION_ID" NUMBER(15) NULL,    -- _operation
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    CONSTRAINT "pk_OPERATION_CONSTRAINT" PRIMARY KEY ("OPERATION_CONSTRAINT_ID")
);

CREATE SEQUENCE "Sq_OPERATION_CONSTRAINT_OPERAT"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_OPERATION_CONSTRAINT_OPERA"  BEFORE INSERT ON "OPERATION_CONSTRAINT"  FOR EACH ROW   BEGIN  SELECT "Sq_OPERATION_CONSTRAINT_OPERAT".nextval INTO :NEW."OPERATION_CONSTRAINT_ID" FROM dual;  END;;

-- ISE.SM.Model.PasswordHistory
CREATE TABLE "PASSWORD_HISTORY" (
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "PASSWORD_HISTORY_ID" NUMBER(15) NOT NULL, -- _passwordhistoryid
    "PASSWORD" VARCHAR2(50) NULL,           -- _password
    "CHANGE_DATE" DATE NULL,                -- _changedate
    "ACCOUNT_ID" NUMBER(15) NULL,           -- _account
    CONSTRAINT "pk_PASSWORD_HISTORY" PRIMARY KEY ("PASSWORD_HISTORY_ID")
);

-- ISE.SM.Model.Permission
CREATE TABLE "PERMISSION" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "RESOURCE_ID" NUMBER(15) NOT NULL,      -- _securityresource
    "PERMISSION_ID" NUMBER(15) NOT NULL,    -- _permissionid
    "OPERATION_ID" NUMBER(15) NOT NULL,     -- _operation
    "IS_DEFAULT" NUMBER(1) NULL,            -- _isdefault
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "COMMENTS" VARCHAR2(1000) NULL,         -- _comments
    CONSTRAINT "pk_PERMISSION" PRIMARY KEY ("PERMISSION_ID")
);

CREATE SEQUENCE "Seq_PERMISSION_PERMISSION_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_PERMISSION_PERMISSION_ID"  BEFORE INSERT ON "PERMISSION"  FOR EACH ROW   BEGIN  SELECT "Seq_PERMISSION_PERMISSION_ID".nextval INTO :NEW."PERMISSION_ID" FROM dual;  END;;

-- ISE.SM.Model.PermissionToRole
CREATE TABLE "PERMISSION_TO_ROLE" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "ROLE_ID" NUMBER(6) NOT NULL,           -- _role
    "PERMISSSION_ACCESS" NUMBER(1) NULL,    -- _permisssionaccess
    "PERMISSION_TO_ROLE_ID" NUMBER(15) NOT NULL, -- _permissiontoroleid
    "PERMISSION_ID" NUMBER(15) NOT NULL,    -- _permission
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_PERMISSION_TO_ROLE" PRIMARY KEY ("PERMISSION_TO_ROLE_ID")
);

CREATE SEQUENCE "Sq_PERMISSION_TO_ROLE_PERMISSI"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_PERMISSION_TO_ROLE_PERMISS"  BEFORE INSERT ON "PERMISSION_TO_ROLE"  FOR EACH ROW   BEGIN  SELECT "Sq_PERMISSION_TO_ROLE_PERMISSI".nextval INTO :NEW."PERMISSION_TO_ROLE_ID" FROM dual;  END;;

-- ISE.SM.Model.PermissionToUser
CREATE TABLE "PERMISSION_TO_USER" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "USER_ID" NUMBER(15) NOT NULL,          -- _securityuser
    "PERMISSION_TO_USER_ID" NUMBER(15) NOT NULL, -- _permissiontouserid
    "PERMISSION_ACCESS" NUMBER(1) NULL,     -- _permissionaccess
    "PERMISSION_ID" NUMBER(15) NOT NULL,    -- _permission
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_PERMISSION_TO_USER" PRIMARY KEY ("PERMISSION_TO_USER_ID")
);

CREATE SEQUENCE "Sq_PERMISSION_TO_USER_PERMISSI"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_PERMISSION_TO_USER_PERMISS"  BEFORE INSERT ON "PERMISSION_TO_USER"  FOR EACH ROW   BEGIN  SELECT "Sq_PERMISSION_TO_USER_PERMISSI".nextval INTO :NEW."PERMISSION_TO_USER_ID" FROM dual;  END;;

-- ISE.SM.Model.ResourceToOperation
CREATE TABLE "RESOURCE_TO_OPERATION" (
    "RESOURCE_ID" NUMBER(15) NULL,          -- _securityresource
    "RESOURCE_TO_OPERATION_ID" NUMBER(15) NOT NULL, -- _resourcetooperationid
    "OPERATION_ID" NUMBER(15) NULL,         -- _operation
    CONSTRAINT "pk_RESOURCE_TO_OPERATION" PRIMARY KEY ("RESOURCE_TO_OPERATION_ID")
);

-- ISE.SM.Model.ResourceType
CREATE TABLE "RESOURCE_TYPE" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "TITLE" VARCHAR2(50) NULL,              -- _title
    "RESOURCE_TYPE_ID" NUMBER(5) NOT NULL,  -- _resourcetypeid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_RESOURCE_TYPE" PRIMARY KEY ("RESOURCE_TYPE_ID")
);

CREATE SEQUENCE "Sq_RESOURCE_TYPE_RESOURCE_TYPE"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_RESOURCE_TYPE_RESOURCE_TYP"  BEFORE INSERT ON "RESOURCE_TYPE"  FOR EACH ROW   BEGIN  SELECT "Sq_RESOURCE_TYPE_RESOURCE_TYPE".nextval INTO :NEW."RESOURCE_TYPE_ID" FROM dual;  END;;

-- ISE.SM.Model.Role
CREATE TABLE "ROLE" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "ROLE_NAME" VARCHAR2(50) NULL,          -- _rolename
    "ROLE_ID" NUMBER(6) NOT NULL,           -- _roleid
    "PARENT_ROLE_ID" NUMBER(6) NULL,        -- _parentroleid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    "CONDIDATE_ROLE_NAME" VARCHAR2(50) NULL, -- _condidaterolename
    "APP_DOMAIN_ID" NUMBER(6) NULL,         -- _appdomainid1
    CONSTRAINT "pk_rle_61FC67DE" PRIMARY KEY ("ROLE_ID")
);

CREATE SEQUENCE "Seq_ROLE_ROLE_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_ROLE_ROLE_ID"  BEFORE INSERT ON "ROLE"  FOR EACH ROW   BEGIN  SELECT "Seq_ROLE_ROLE_ID".nextval INTO :NEW."ROLE_ID" FROM dual;  END;;

-- ISE.SM.Model.RoleToGroup
CREATE TABLE "ROLE_TO_GROUP" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "GROUP_ID" NUMBER(6) NULL,              -- _securitygroup
    "ROLE_ID" NUMBER(6) NULL,               -- _role
    "RG_ID" NUMBER(6) NOT NULL,             -- _rgid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_ROLE_TO_GROUP" PRIMARY KEY ("RG_ID")
);

CREATE SEQUENCE "Seq_ROLE_TO_GROUP_RG_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_ROLE_TO_GROUP_RG_ID"  BEFORE INSERT ON "ROLE_TO_GROUP"  FOR EACH ROW   BEGIN  SELECT "Seq_ROLE_TO_GROUP_RG_ID".nextval INTO :NEW."RG_ID" FROM dual;  END;;

-- ISE.SM.Model.RoleToRole
CREATE TABLE "ROLE_TO_ROLE" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "RR_ID" NUMBER(6) NOT NULL,             -- _rrid
    "PARENT_ROLE_ID" NUMBER(6) NULL,        -- _role1
    "CHILD_ROLE_ID" NUMBER(6) NULL,         -- _role
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_ROLE_TO_ROLE" PRIMARY KEY ("RR_ID")
);

CREATE SEQUENCE "Seq_ROLE_TO_ROLE_RR_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_ROLE_TO_ROLE_RR_ID"  BEFORE INSERT ON "ROLE_TO_ROLE"  FOR EACH ROW   BEGIN  SELECT "Seq_ROLE_TO_ROLE_RR_ID".nextval INTO :NEW."RR_ID" FROM dual;  END;;

-- ISE.SM.Model.RoleToRoleConstraint
CREATE TABLE "ROLE_TO_ROLE_CONSTRAINT" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "RR_CONSTRAINT_ID" NUMBER(6) NOT NULL,  -- _rrconstraintid
    "SOURCE_ROLE_ID" NUMBER(6) NULL,        -- _role1
    "DEST_ROLE_ID" NUMBER(6) NULL,          -- _role
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "ENABLE" NUMBER(1) NULL,                -- _enable
    CONSTRAINT "pk_ROLE_TO_ROLE_CONSTRAINT" PRIMARY KEY ("RR_CONSTRAINT_ID")
);

CREATE SEQUENCE "Sq_ROLE_TO_ROLE_CONSTRAINT_RR_"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_ROLE_TO_ROLE_CONSTRAINT_RR"  BEFORE INSERT ON "ROLE_TO_ROLE_CONSTRAINT"  FOR EACH ROW   BEGIN  SELECT "Sq_ROLE_TO_ROLE_CONSTRAINT_RR_".nextval INTO :NEW."RR_CONSTRAINT_ID" FROM dual;  END;;

-- ISE.SM.Model.Scope
CREATE TABLE "SCOPE" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "SCOPE_NAME" VARCHAR2(50) NULL,         -- _scopename
    "SCOPE_ID" NUMBER(6) NOT NULL,          -- _scopeid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "DISPLAY_NAME" VARCHAR2(50) NULL,       -- _displayname
    CONSTRAINT "pk_scpe_F7FB9763" PRIMARY KEY ("SCOPE_ID")
);

CREATE SEQUENCE "Seq_SCOPE_SCOPE_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SCOPE_SCOPE_ID"  BEFORE INSERT ON "SCOPE"  FOR EACH ROW   BEGIN  SELECT "Seq_SCOPE_SCOPE_ID".nextval INTO :NEW."SCOPE_ID" FROM dual;  END;;

-- ISE.SM.Model.SecurityCompany
CREATE TABLE "SECURITY_COMPANY" (
    "SECURITY_COMPANY_ID" NUMBER(9) NOT NULL, -- _securitycompanyid
    "NATIONAL_CODE" NVARCHAR2(50) NULL,     -- _nationalcode
    "HAS_PERSON_CODE" NUMBER(1) NULL,       -- _haspersoncode
    "COMPANY_NAME" NVARCHAR2(100) NULL,     -- _companyname
    CONSTRAINT "pk_SECURITY_COMPANY" PRIMARY KEY ("SECURITY_COMPANY_ID")
);

-- ISE.SM.Model.SecurityGroup
CREATE TABLE "SECURITY_GROUP" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "SECURITY_GROUP_ID" NUMBER(6) NOT NULL, -- _securitygroupid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "GROUP_NAME" VARCHAR2(50) NULL,         -- _groupname
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    "DISPLAY_NAME" VARCHAR2(100) NULL,      -- _displayname
    "APP_DOMAIN_ID" NUMBER(6) NULL,         -- _appdomainid
    CONSTRAINT "pk_SECURITY_GROUP" PRIMARY KEY ("SECURITY_GROUP_ID")
);

CREATE SEQUENCE "Sq_SECURITY_GROUP_SECURITY_GRO"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SECURITY_GROUP_SECURITY_GR"  BEFORE INSERT ON "SECURITY_GROUP"  FOR EACH ROW   BEGIN  SELECT "Sq_SECURITY_GROUP_SECURITY_GRO".nextval INTO :NEW."SECURITY_GROUP_ID" FROM dual;  END;;

-- ISE.SM.Model.SecurityResource
CREATE TABLE "SECURITY_RESOURCE" (
    "USER_DESCRIPTION" VARCHAR2(100) NULL,  -- _userdescription
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "TOOL_TIP" VARCHAR2(150) NULL,          -- _tooltip
    "SYSTEM_PASSWORD" VARCHAR2(50) NULL,    -- _systempassword
    "SOFTWARE_DOMAIN_ID" NUMBER(5) NULL,    -- _softwaredomain
    "SECURITY_RESOURCE_ID" NUMBER(15) NOT NULL, -- _securityresourceid
    "RESOURCE_TYPE_ID" NUMBER(5) NULL,      -- _resourcetype
    "RESOURCE_NAME" VARCHAR2(50) NULL,      -- _resourcename
    "PRECEDENCE" NUMBER(6) NULL,            -- _precedence
    "PATH" VARCHAR2(100) NULL,              -- _path
    "PARENT_ID" NUMBER(15) NULL,            -- _parentid
    "NAMESPACE" VARCHAR2(100) NULL,         -- _namespace
    "LOGIN_NAME" VARCHAR2(100) NULL,        -- _loginname
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "ICON" VARCHAR2(20) NULL,               -- _icon
    "HAS_PARAMETER" NUMBER(1) NULL,         -- _hasparameter
    "HAS_ITEM_ACTION" NUMBER(1) NULL,       -- _hasitemaction
    "EXECUTABLE_FILE" VARCHAR2(100) NULL,   -- _executablefile
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    "DISPLAY_NAME" VARCHAR2(100) NULL,      -- _displayname
    "DEV_DESCRIPTION" VARCHAR2(100) NULL,   -- _devdescription
    "CALL3" VARCHAR2(50) NULL,              -- _call3
    "CALL2" VARCHAR2(50) NULL,              -- _call2
    "CALL1" VARCHAR2(50) NULL,              -- _call1
    "ASSEMBLY_NAME" VARCHAR2(100) NULL,     -- _assemblyname
    "APP_DOMAIN_ID" NUMBER(5) NULL,         -- _applicationdomain
    CONSTRAINT "pk_SECURITY_RESOURCE" PRIMARY KEY ("SECURITY_RESOURCE_ID")
);

CREATE SEQUENCE "Sq_SECURITY_RESOURCE_SECURITY_"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SECURITY_RESOURCE_SECURITY"  BEFORE INSERT ON "SECURITY_RESOURCE"  FOR EACH ROW   BEGIN  SELECT "Sq_SECURITY_RESOURCE_SECURITY_".nextval INTO :NEW."SECURITY_RESOURCE_ID" FROM dual;  END;;

-- ISE.SM.Model.SecuritySession
CREATE TABLE "SECURITY_SESSION" (
    "SECURITY_SESSION_ID" NUMBER(15) NOT NULL, -- _securitysessionid
    "EXPIRED_DATE" DATE NULL,               -- _expireddate
    "CREATE_DATE" DATE NULL,                -- _createdate
    "APP_DOMAIN_ID" NUMBER(6) NULL,         -- _appdomainid
    "ACCOUNT_ID" NUMBER(15) NULL,           -- _account
    CONSTRAINT "pk_SECURITY_SESSION" PRIMARY KEY ("SECURITY_SESSION_ID")
);

CREATE SEQUENCE "Sq_SECURITY_SESSION_SECURITY_S"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SECURITY_SESSION_SECURITY_"  BEFORE INSERT ON "SECURITY_SESSION"  FOR EACH ROW   BEGIN  SELECT "Sq_SECURITY_SESSION_SECURITY_S".nextval INTO :NEW."SECURITY_SESSION_ID" FROM dual;  END;;

-- ISE.SM.Model.SecurityUser
CREATE TABLE "SECURITY_USER" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "SECURITY_USER_ID" NUMBER(15) NOT NULL, -- _securityuserid
    "PERSONEL_CODE" VARCHAR2(20) NULL,      -- _personelcode
    "PER_ID" NUMBER(6) NULL,                -- _perid
    "NATIONAL_CODE" VARCHAR2(12) NULL,      -- _nationalcode
    "LNAME" VARCHAR2(50) NULL,              -- _lname
    "IS_REAL_PERSON" NUMBER(1) NULL,        -- _isrealperson
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "FNAME" VARCHAR2(50) NULL,              -- _fname
    "EXTERNAL_SYSTEM_PID" NUMBER(6) NULL,   -- _externalsystempid
    "EXPIREDATE" DATE NULL,                 -- _expiredate
    "ETERNAL_SYSTEM_ID" NUMBER(6) NULL,     -- _eternalsystemid
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    "COMPANY_NAITONAL_CODE" NVARCHAR2(50) NULL, -- _companynaitonalcode
    CONSTRAINT "pk_SECURITY_USER" PRIMARY KEY ("SECURITY_USER_ID")
);

CREATE SEQUENCE "Sq_SECURITY_USER_SECURITY_USER"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SECURITY_USER_SECURITY_USE"  BEFORE INSERT ON "SECURITY_USER"  FOR EACH ROW   BEGIN  SELECT "Sq_SECURITY_USER_SECURITY_USER".nextval INTO :NEW."SECURITY_USER_ID" FROM dual;  END;;

-- ISE.SM.Model.SecurityUserLog
CREATE TABLE "SECURITY_USER_LOG" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "SERVICE" VARCHAR2(50) NULL,            -- _service
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "SESSION_ID" NUMBER(15) NULL,           -- _securitysession
    "SECURITY_USER_LOG_ID" NUMBER(15) NOT NULL, -- _securityuserlogid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "DESCRIPTION" VARCHAR2(100) NULL,       -- _description
    "APP_DOMAIN_ID" NUMBER(6) NULL,         -- _appdomainid
    "ACTION_PARAM" VARCHAR2(200) NULL,      -- _actionparam
    "ACTION" VARCHAR2(100) NULL,            -- _action
    "ACCOUNT_ID" NUMBER(15) NULL,           -- _account
    CONSTRAINT "pk_SECURITY_USER_LOG" PRIMARY KEY ("SECURITY_USER_LOG_ID")
);

CREATE SEQUENCE "Sq_SECURITY_USER_LOG_SECURITY_"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SECURITY_USER_LOG_SECURITY"  BEFORE INSERT ON "SECURITY_USER_LOG"  FOR EACH ROW   BEGIN  SELECT "Sq_SECURITY_USER_LOG_SECURITY_".nextval INTO :NEW."SECURITY_USER_LOG_ID" FROM dual;  END;;

-- ISE.SM.Model.SoftwareDomain
CREATE TABLE "SOFTWARE_DOMAIN" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "TITLE" VARCHAR2(100) NULL,             -- _title
    "SOFTWARE_DOMAIN_ID" NUMBER(5) NOT NULL, -- _softwaredomainid
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "ENABLED" NUMBER(1) NULL,               -- _enabled
    CONSTRAINT "pk_SOFTWARE_DOMAIN" PRIMARY KEY ("SOFTWARE_DOMAIN_ID")
);

CREATE SEQUENCE "Sq_SOFTWARE_DOMAIN_SOFTWARE_DO"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_SOFTWARE_DOMAIN_SOFTWARE_D"  BEFORE INSERT ON "SOFTWARE_DOMAIN"  FOR EACH ROW   BEGIN  SELECT "Sq_SOFTWARE_DOMAIN_SOFTWARE_DO".nextval INTO :NEW."SOFTWARE_DOMAIN_ID" FROM dual;  END;;

-- ISE.SM.Model.UserLog
CREATE TABLE "USER_LOG" (
    "USER_LOG_ID" NUMBER(15) NOT NULL,      -- _userlogid
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "RESOURCE_ID" NUMBER(15) NULL,          -- _securityresource
    "RUN_TYPE" NUMBER(2) NULL,              -- _runtype
    "OPERATION_ID" NUMBER(15) NULL,         -- _operation
    "LOG_DATE_TIME" DATE NULL,              -- _logdatetime
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "COMPUTER_NAME" VARCHAR2(255) NULL,     -- _computername
    CONSTRAINT "pk_USER_LOG" PRIMARY KEY ("USER_LOG_ID")
);

-- ISE.SM.Model.UserProfile
CREATE TABLE "USER_PROFILE" (
    "USER_PROFILE_ID" NUMBER(15) NOT NULL,  -- _userprofileid
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    CONSTRAINT "pk_USER_PROFILE" PRIMARY KEY ("USER_PROFILE_ID")
);

-- ISE.SM.Model.UserResourceScope
CREATE TABLE "USER_RESOURCE_SCOPE" (
    "USER_RESOURCE_SCOPE_ID" NUMBER(15) NOT NULL, -- _userresourcescopeid
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "RESOURCE_ID" NUMBER(15) NULL,          -- _securityresource
    "SCOPE_ID" NUMBER(6) NULL,              -- _scope
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_USER_RESOURCE_SCOPE" PRIMARY KEY ("USER_RESOURCE_SCOPE_ID")
);

CREATE SEQUENCE "Sq_USER_RESOURCE_SCOPE_USER_RE"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_USER_RESOURCE_SCOPE_USER_R"  BEFORE INSERT ON "USER_RESOURCE_SCOPE"  FOR EACH ROW   BEGIN  SELECT "Sq_USER_RESOURCE_SCOPE_USER_RE".nextval INTO :NEW."USER_RESOURCE_SCOPE_ID" FROM dual;  END;;

-- ISE.SM.Model.UserToCompany
CREATE TABLE "USER_TO_COMPANY" (
    "USER_TO_COMPANY_ID" NUMBER(15) NOT NULL, -- _usertocompanyid
    "TO_DATE" DATE NULL,                    -- _todate
    "SECURITY_USER_ID" NUMBER(15) NULL,     -- _securityuser
    "COMPANY_ID" NUMBER(9) NULL,            -- _securitycompany
    "FROM_DATE" DATE NULL,                  -- _fromdate
    CONSTRAINT "pk_USER_TO_COMPANY" PRIMARY KEY ("USER_TO_COMPANY_ID")
);

-- ISE.SM.Model.UserToGroup
CREATE TABLE "USER_TO_GROUP" (
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "UG_ID" NUMBER(6) NOT NULL,             -- _ugid
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "GROUP_ID" NUMBER(6) NULL,              -- _securitygroup
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_USER_TO_GROUP" PRIMARY KEY ("UG_ID")
);

CREATE SEQUENCE "Seq_USER_TO_GROUP_UG_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_USER_TO_GROUP_UG_ID"  BEFORE INSERT ON "USER_TO_GROUP"  FOR EACH ROW   BEGIN  SELECT "Seq_USER_TO_GROUP_UG_ID".nextval INTO :NEW."UG_ID" FROM dual;  END;;

-- ISE.SM.Model.UserToRole
CREATE TABLE "USER_TO_ROLE" (
    "UR_ID" NUMBER(15) NOT NULL,            -- _urid
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "ROLE_ID" NUMBER(6) NULL,               -- _role
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    CONSTRAINT "pk_USER_TO_ROLE" PRIMARY KEY ("UR_ID")
);

CREATE SEQUENCE "Seq_USER_TO_ROLE_UR_ID"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_USER_TO_ROLE_UR_ID"  BEFORE INSERT ON "USER_TO_ROLE"  FOR EACH ROW   BEGIN  SELECT "Seq_USER_TO_ROLE_UR_ID".nextval INTO :NEW."UR_ID" FROM dual;  END;;

-- ISE.SM.Model.UserToRoleConstraint
CREATE TABLE "USER_TO_ROLE_CONSTRAINT" (
    "UR_CONSTRAINT_ID" NUMBER(15) NOT NULL, -- _urconstraintid
    "UPDATE_PER_ID" NUMBER(6) NULL,         -- _updateperid
    "UPDATE_DATE" DATE NULL,                -- _updatedate
    "USER_ID" NUMBER(15) NULL,              -- _securityuser
    "ROLE_ID" NUMBER(6) NULL,               -- _role
    "INSERT_PER_ID" NUMBER(6) NULL,         -- _insertperid
    "INSERT_DATE" DATE NULL,                -- _insertdate
    "ENABLE" NUMBER(1) NULL,                -- _enable
    CONSTRAINT "pk_USER_TO_ROLE_CONSTRAINT" PRIMARY KEY ("UR_CONSTRAINT_ID")
);

CREATE SEQUENCE "Sq_USER_TO_ROLE_CONSTRAINT_UR_"  START WITH 1  INCREMENT BY 1  NOMAXVALUE  NOCACHE ;

CREATE TRIGGER "Trg_USER_TO_ROLE_CONSTRAINT_UR"  BEFORE INSERT ON "USER_TO_ROLE_CONSTRAINT"  FOR EACH ROW   BEGIN  SELECT "Sq_USER_TO_ROLE_CONSTRAINT_UR_".nextval INTO :NEW."UR_CONSTRAINT_ID" FROM dual;  END;;

CREATE INDEX "idx_ACCOUNT_USER_ID" ON "ACCOUNT"("USER_ID");

CREATE INDEX "idx_ACCOUNT_TO_APP_DOMAIN_ACCO" ON "ACCOUNT_TO_APP_DOMAIN"("ACCOUNT_ID");

CREATE INDEX "idx_ACCOUNT_TO_APP_DOMAIN_APP_" ON "ACCOUNT_TO_APP_DOMAIN"("APP_DOMAIN_ID");

CREATE INDEX "idx_APPLICATION_DOMAIN_LOGIN_T" ON "APPLICATION_DOMAIN"("LOGIN_TYPE_ID");

CREATE INDEX "idx_GROUP_TO_GROUP_PARENT_GROU" ON "GROUP_TO_GROUP"("PARENT_GROUP_ID");

CREATE INDEX "idx_GROUP_TO_GROUP_CHILD_GROUP" ON "GROUP_TO_GROUP"("CHILD_GROUP_ID");

CREATE INDEX "idx_MANAGEMENT_ACCOUNT_MANAGEM" ON "MANAGEMENT_ACCOUNT"("MANAGEMENT_ROLE_ID");

CREATE INDEX "idx_MANAGEMENT_ACCOUNT_SECURIT" ON "MANAGEMENT_ACCOUNT"("SECURITY_USER_ID");

CREATE INDEX "idx_MANAGEMENT_LOG_USER_ID" ON "MANAGEMENT_LOG"("USER_ID");

CREATE INDEX "idx_OPERATION_CONSTRAINT_SRC_O" ON "OPERATION_CONSTRAINT"("SRC_OPERATION_ID");

CREATE INDEX "idx_OPERATION_CONSTRAINT_DEST_" ON "OPERATION_CONSTRAINT"("DEST_OPERATION_ID");

CREATE INDEX "idx_PASSWORD_HISTORY_ACCOUNT_I" ON "PASSWORD_HISTORY"("ACCOUNT_ID");

CREATE INDEX "idx_PASSWORD_HISTORY_USER_ID" ON "PASSWORD_HISTORY"("USER_ID");

CREATE INDEX "idx_PERMISSION_OPERATION_ID" ON "PERMISSION"("OPERATION_ID");

CREATE INDEX "idx_PERMISSION_RESOURCE_ID" ON "PERMISSION"("RESOURCE_ID");

CREATE INDEX "idx_PERMISSION_TO_ROLE_PERMISS" ON "PERMISSION_TO_ROLE"("PERMISSION_ID");

CREATE INDEX "idx_PERMISSION_TO_ROLE_ROLE_ID" ON "PERMISSION_TO_ROLE"("ROLE_ID");

CREATE INDEX "idx_PERMISSION_TO_USER_PERMISS" ON "PERMISSION_TO_USER"("PERMISSION_ID");

CREATE INDEX "idx_PERMISSION_TO_USER_USER_ID" ON "PERMISSION_TO_USER"("USER_ID");

CREATE INDEX "idx_RESOURCE_TO_OPERATION_OPER" ON "RESOURCE_TO_OPERATION"("OPERATION_ID");

CREATE INDEX "idx_RESOURCE_TO_OPERATION_RESO" ON "RESOURCE_TO_OPERATION"("RESOURCE_ID");

CREATE INDEX "idx_ROLE_TO_GROUP_ROLE_ID" ON "ROLE_TO_GROUP"("ROLE_ID");

CREATE INDEX "idx_ROLE_TO_GROUP_GROUP_ID" ON "ROLE_TO_GROUP"("GROUP_ID");

CREATE INDEX "idx_ROLE_TO_ROLE_PARENT_ROLE_I" ON "ROLE_TO_ROLE"("PARENT_ROLE_ID");

CREATE INDEX "idx_ROLE_TO_ROLE_CHILD_ROLE_ID" ON "ROLE_TO_ROLE"("CHILD_ROLE_ID");

CREATE INDEX "idx_ROLE_TO_ROLE_CONSTRAINT_SO" ON "ROLE_TO_ROLE_CONSTRAINT"("SOURCE_ROLE_ID");

CREATE INDEX "idx_ROLE_TO_ROLE_CONSTRAINT_DE" ON "ROLE_TO_ROLE_CONSTRAINT"("DEST_ROLE_ID");

CREATE INDEX "idx_SECURITY_RESOURCE_APP_DOMA" ON "SECURITY_RESOURCE"("APP_DOMAIN_ID");

CREATE INDEX "idx_SECURITY_RESOURCE_RESOURCE" ON "SECURITY_RESOURCE"("RESOURCE_TYPE_ID");

CREATE INDEX "idx_SECURITY_RESOURCE_SOFTWARE" ON "SECURITY_RESOURCE"("SOFTWARE_DOMAIN_ID");

CREATE INDEX "idx_SECURITY_SESSION_ACCOUNT_I" ON "SECURITY_SESSION"("ACCOUNT_ID");

CREATE INDEX "idx_SECURITY_USER_LOG_ACCOUNT_" ON "SECURITY_USER_LOG"("ACCOUNT_ID");

CREATE INDEX "idx_SECURITY_USER_LOG_SESSION_" ON "SECURITY_USER_LOG"("SESSION_ID");

CREATE INDEX "idx_SECURITY_USER_LOG_USER_ID" ON "SECURITY_USER_LOG"("USER_ID");

CREATE INDEX "idx_USER_LOG_OPERATION_ID" ON "USER_LOG"("OPERATION_ID");

CREATE INDEX "idx_USER_LOG_RESOURCE_ID" ON "USER_LOG"("RESOURCE_ID");

CREATE INDEX "idx_USER_LOG_USER_ID" ON "USER_LOG"("USER_ID");

CREATE INDEX "idx_USER_PROFILE_USER_ID" ON "USER_PROFILE"("USER_ID");

CREATE INDEX "idx_USER_RESOURCE_SCOPE_SCOPE_" ON "USER_RESOURCE_SCOPE"("SCOPE_ID");

CREATE INDEX "idx_USER_RESOURCE_SCOPE_RESOUR" ON "USER_RESOURCE_SCOPE"("RESOURCE_ID");

CREATE INDEX "idx_USER_RESOURCE_SCOPE_USER_I" ON "USER_RESOURCE_SCOPE"("USER_ID");

CREATE INDEX "idx_USER_TO_COMPANY_COMPANY_ID" ON "USER_TO_COMPANY"("COMPANY_ID");

CREATE INDEX "idx_USER_TO_COMPANY_SECURITY_U" ON "USER_TO_COMPANY"("SECURITY_USER_ID");

CREATE INDEX "idx_USER_TO_GROUP_GROUP_ID" ON "USER_TO_GROUP"("GROUP_ID");

CREATE INDEX "idx_USER_TO_GROUP_USER_ID" ON "USER_TO_GROUP"("USER_ID");

CREATE INDEX "idx_USER_TO_ROLE_ROLE_ID" ON "USER_TO_ROLE"("ROLE_ID");

CREATE INDEX "idx_USER_TO_ROLE_USER_ID" ON "USER_TO_ROLE"("USER_ID");

CREATE INDEX "idx_USER_TO_ROLE_CONSTRAINT_RO" ON "USER_TO_ROLE_CONSTRAINT"("ROLE_ID");

CREATE INDEX "idx_USER_TO_ROLE_CONSTRAINT_US" ON "USER_TO_ROLE_CONSTRAINT"("USER_ID");

ALTER TABLE "ACCOUNT" ADD CONSTRAINT "ACCOUNT_USER_FKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "ACCOUNT_TO_APP_DOMAIN" ADD CONSTRAINT "ACC_TO_APP_ACC_FKEY" FOREIGN KEY ("ACCOUNT_ID") REFERENCES "ACCOUNT"("ACCOUNT_ID");

ALTER TABLE "ACCOUNT_TO_APP_DOMAIN" ADD CONSTRAINT "ACC_TO_APP_APP_FKEY" FOREIGN KEY ("APP_DOMAIN_ID") REFERENCES "APPLICATION_DOMAIN"("APPLICATION_DOMAIN_ID");

ALTER TABLE "APPLICATION_DOMAIN" ADD CONSTRAINT "APP_DOMAIN_LOGINTYPE_FKEY" FOREIGN KEY ("LOGIN_TYPE_ID") REFERENCES "LOGIN_TYPE"("LOGIN_TYPE_ID");

ALTER TABLE "GROUP_TO_GROUP" ADD CONSTRAINT "GG_DEST_FKEY" FOREIGN KEY ("CHILD_GROUP_ID") REFERENCES "SECURITY_GROUP"("SECURITY_GROUP_ID");

ALTER TABLE "GROUP_TO_GROUP" ADD CONSTRAINT "GG_SOURCE_FKEY" FOREIGN KEY ("PARENT_GROUP_ID") REFERENCES "SECURITY_GROUP"("SECURITY_GROUP_ID");

ALTER TABLE "MANAGEMENT_ACCOUNT" ADD CONSTRAINT "MNG_MANAGEMENT_ROLE_FKEY" FOREIGN KEY ("MANAGEMENT_ROLE_ID") REFERENCES "MANAGEMENT_ROLE"("MANAGEMENT_ROLE_ID");

ALTER TABLE "MANAGEMENT_ACCOUNT" ADD CONSTRAINT "MNG_SECURITY_USER_FKEY" FOREIGN KEY ("SECURITY_USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "MANAGEMENT_LOG" ADD CONSTRAINT "MANAGEMENT_LOG_USER_FKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "OPERATION_CONSTRAINT" ADD CONSTRAINT "FK2_OP_OP" FOREIGN KEY ("DEST_OPERATION_ID") REFERENCES "OPERATION"("OPERATION_ID");

ALTER TABLE "OPERATION_CONSTRAINT" ADD CONSTRAINT "FK1_OP_OP" FOREIGN KEY ("SRC_OPERATION_ID") REFERENCES "OPERATION"("OPERATION_ID");

ALTER TABLE "PASSWORD_HISTORY" ADD CONSTRAINT "PASSWORD_HISTORY_ACCFKEY" FOREIGN KEY ("ACCOUNT_ID") REFERENCES "ACCOUNT"("ACCOUNT_ID");

ALTER TABLE "PASSWORD_HISTORY" ADD CONSTRAINT "PASSWORD_HISTORY_USERFKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "PERMISSION" ADD CONSTRAINT "PERMISSION_OPERATION_FKEY" FOREIGN KEY ("OPERATION_ID") REFERENCES "OPERATION"("OPERATION_ID");

ALTER TABLE "PERMISSION" ADD CONSTRAINT "PERMISSION_RESOURCE_FKEY" FOREIGN KEY ("RESOURCE_ID") REFERENCES "SECURITY_RESOURCE"("SECURITY_RESOURCE_ID");

ALTER TABLE "PERMISSION_TO_ROLE" ADD CONSTRAINT "PERMISSION_ROLE_PER_FKEY" FOREIGN KEY ("PERMISSION_ID") REFERENCES "PERMISSION"("PERMISSION_ID");

ALTER TABLE "PERMISSION_TO_ROLE" ADD CONSTRAINT "PERMISSION_ROLE_ROLE_FKEY" FOREIGN KEY ("ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "PERMISSION_TO_USER" ADD CONSTRAINT "PERMISSION_TO_USER_PER_FKEY" FOREIGN KEY ("PERMISSION_ID") REFERENCES "PERMISSION"("PERMISSION_ID");

ALTER TABLE "PERMISSION_TO_USER" ADD CONSTRAINT "PERMISSION_TO_USER_USER_FKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "RESOURCE_TO_OPERATION" ADD CONSTRAINT "RESOURCE_TO_OPERATION_OFKEY" FOREIGN KEY ("OPERATION_ID") REFERENCES "OPERATION"("OPERATION_ID");

ALTER TABLE "RESOURCE_TO_OPERATION" ADD CONSTRAINT "RESOURCE_TO_OPERATION_RFKEY" FOREIGN KEY ("RESOURCE_ID") REFERENCES "SECURITY_RESOURCE"("SECURITY_RESOURCE_ID");

ALTER TABLE "ROLE_TO_GROUP" ADD CONSTRAINT "RG_ROLE_FKEY" FOREIGN KEY ("ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "ROLE_TO_GROUP" ADD CONSTRAINT "RG_GROUP_FKEY" FOREIGN KEY ("GROUP_ID") REFERENCES "SECURITY_GROUP"("SECURITY_GROUP_ID");

ALTER TABLE "ROLE_TO_ROLE" ADD CONSTRAINT "RR_CHILD_FKEY" FOREIGN KEY ("CHILD_ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "ROLE_TO_ROLE" ADD CONSTRAINT "RR_PARENT_FKEY" FOREIGN KEY ("PARENT_ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "ROLE_TO_ROLE_CONSTRAINT" ADD CONSTRAINT "RRC_DEST_ROLE_FKEY" FOREIGN KEY ("DEST_ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "ROLE_TO_ROLE_CONSTRAINT" ADD CONSTRAINT "RRC_SOURCE_ROLE_FKEY" FOREIGN KEY ("SOURCE_ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "SECURITY_RESOURCE" ADD CONSTRAINT "RESOURCE_APPDOMAN_FKEY" FOREIGN KEY ("APP_DOMAIN_ID") REFERENCES "APPLICATION_DOMAIN"("APPLICATION_DOMAIN_ID");

ALTER TABLE "SECURITY_RESOURCE" ADD CONSTRAINT "SEC_RESOURCE_RESTYPE_FKEY" FOREIGN KEY ("RESOURCE_TYPE_ID") REFERENCES "RESOURCE_TYPE"("RESOURCE_TYPE_ID");

ALTER TABLE "SECURITY_RESOURCE" ADD CONSTRAINT "RESOURCE_SOFTWARE_DOMAIN_FKEY" FOREIGN KEY ("SOFTWARE_DOMAIN_ID") REFERENCES "SOFTWARE_DOMAIN"("SOFTWARE_DOMAIN_ID");

ALTER TABLE "SECURITY_SESSION" ADD CONSTRAINT "SESSION_AC_FKEY" FOREIGN KEY ("ACCOUNT_ID") REFERENCES "ACCOUNT"("ACCOUNT_ID");

ALTER TABLE "SECURITY_USER_LOG" ADD CONSTRAINT "SECURITY_USER_LOG_ACCFKEY" FOREIGN KEY ("ACCOUNT_ID") REFERENCES "ACCOUNT"("ACCOUNT_ID");

ALTER TABLE "SECURITY_USER_LOG" ADD CONSTRAINT "SECURITY_USER_LOG_SESSIONFKEY" FOREIGN KEY ("SESSION_ID") REFERENCES "SECURITY_SESSION"("SECURITY_SESSION_ID");

ALTER TABLE "SECURITY_USER_LOG" ADD CONSTRAINT "SECURITY_USER_LOG_USERFKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_LOG" ADD CONSTRAINT "FKEY_REQLOG_OP" FOREIGN KEY ("OPERATION_ID") REFERENCES "OPERATION"("OPERATION_ID");

ALTER TABLE "USER_LOG" ADD CONSTRAINT "FKEY_RELOG_RESOURCE" FOREIGN KEY ("RESOURCE_ID") REFERENCES "SECURITY_RESOURCE"("SECURITY_RESOURCE_ID");

ALTER TABLE "USER_LOG" ADD CONSTRAINT "FKEY_REQLOG_USER" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_PROFILE" ADD CONSTRAINT "USER_PROFILE_FKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_RESOURCE_SCOPE" ADD CONSTRAINT "URC_SCOPERFKEY" FOREIGN KEY ("SCOPE_ID") REFERENCES "SCOPE"("SCOPE_ID");

ALTER TABLE "USER_RESOURCE_SCOPE" ADD CONSTRAINT "URC_RESOURCEFKEY" FOREIGN KEY ("RESOURCE_ID") REFERENCES "SECURITY_RESOURCE"("SECURITY_RESOURCE_ID");

ALTER TABLE "USER_RESOURCE_SCOPE" ADD CONSTRAINT "URC_USERFKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_TO_COMPANY" ADD CONSTRAINT "UC_COMPANY_ID_FKEY" FOREIGN KEY ("COMPANY_ID") REFERENCES "SECURITY_COMPANY"("SECURITY_COMPANY_ID");

ALTER TABLE "USER_TO_COMPANY" ADD CONSTRAINT "UC_USER_FK" FOREIGN KEY ("SECURITY_USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_TO_GROUP" ADD CONSTRAINT "UG_GROUP_FKEY" FOREIGN KEY ("GROUP_ID") REFERENCES "SECURITY_GROUP"("SECURITY_GROUP_ID");

ALTER TABLE "USER_TO_GROUP" ADD CONSTRAINT "UG_USER_FKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_TO_ROLE" ADD CONSTRAINT "URROLEFKEY" FOREIGN KEY ("ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "USER_TO_ROLE" ADD CONSTRAINT "URUSERFKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

ALTER TABLE "USER_TO_ROLE_CONSTRAINT" ADD CONSTRAINT "UR_CONSTRAINT_ROLE_FKEY" FOREIGN KEY ("ROLE_ID") REFERENCES "ROLE"("ROLE_ID");

ALTER TABLE "USER_TO_ROLE_CONSTRAINT" ADD CONSTRAINT "UR_CONSTRAINT_USER_FKEY" FOREIGN KEY ("USER_ID") REFERENCES "SECURITY_USER"("SECURITY_USER_ID");

