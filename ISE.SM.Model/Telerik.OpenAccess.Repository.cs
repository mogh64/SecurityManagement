#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ISE.SM.Model;
using ISE.SM.Common.DTO;


namespace ISE.SM.Model	
{
	public partial class UserRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<User, UserDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserDto FindSingle(Expression<Func<User, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    User oaObj = this.Context.GetAll<User>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserDto> Find(Expression<Func<User, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<User> oaObjects = this.Context.GetAll<User>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<User> GetQueryable()
		{    
		    IQueryable<User> oaObjects = this.Context.GetAll<User>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<User, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<User>().Count(expression);
		
		    return count;
		}
		
		internal static User CreateInternal(UserDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			User oaObj = new User();
		
			oaObj.UpdateUserId = dtObj.UpdateUserId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.PersonelCode = dtObj.PersonelCode;
			oaObj.PerId = dtObj.PerId;
			oaObj.NationalNo = dtObj.NationalNo;
			oaObj.LastName = dtObj.LastName;
			oaObj.IsRealPerson = dtObj.IsRealPerson;
			oaObj.InsertUserId = dtObj.InsertUserId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.FirstName = dtObj.FirstName;
			oaObj.LockDate = dtObj.LockDate;
			oaObj.CompanyId = dtObj.CompanyId;
			oaObj.UserId = dtObj.UserId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public User Create(UserDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static User UpdateOrCreateInternal(UserDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			User oaObj = (from t in context.GetAll<User>() where
							t.UserId == dtObj.UserId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdateUserId = dtObj.UpdateUserId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.PersonelCode = dtObj.PersonelCode;
			oaObj.PerId = dtObj.PerId;
			oaObj.NationalNo = dtObj.NationalNo;
			oaObj.LastName = dtObj.LastName;
			oaObj.IsRealPerson = dtObj.IsRealPerson;
			oaObj.InsertUserId = dtObj.InsertUserId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.FirstName = dtObj.FirstName;
			oaObj.LockDate = dtObj.LockDate;
			oaObj.CompanyId = dtObj.CompanyId;
			return oaObj;
		}
		
		public User UpdateOrCreate(UserDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			User oaObj = (from t in this.Context.GetAll<User>() where
								t.UserId == dtObj.UserId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserDto GetDto(User oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserDto dtObj = new UserDto();
			dtObj.UpdateUserId = oaObj.UpdateUserId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.PersonelCode = oaObj.PersonelCode;
			dtObj.PerId = oaObj.PerId;
			dtObj.NationalNo = oaObj.NationalNo;
			dtObj.LastName = oaObj.LastName;
			dtObj.IsRealPerson = oaObj.IsRealPerson;
			dtObj.InsertUserId = oaObj.InsertUserId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.FirstName = oaObj.FirstName;
			dtObj.LockDate = oaObj.LockDate;
			dtObj.CompanyId = oaObj.CompanyId;
			dtObj.UserId = oaObj.UserId;
			
			return dtObj;
		}
		
		public static IList<UserDto> GetDtos(IQueryable<User> oaObjects)
		{
			IList<UserDto> dtObjects = new List<UserDto>();
			foreach(User oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserToRoleConstraintRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserToRoleConstraint, UserToRoleConstraintDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserToRoleConstraintDto FindSingle(Expression<Func<UserToRoleConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserToRoleConstraint oaObj = this.Context.GetAll<UserToRoleConstraint>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserToRoleConstraintDto> Find(Expression<Func<UserToRoleConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserToRoleConstraint> oaObjects = this.Context.GetAll<UserToRoleConstraint>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserToRoleConstraint> GetQueryable()
		{    
		    IQueryable<UserToRoleConstraint> oaObjects = this.Context.GetAll<UserToRoleConstraint>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserToRoleConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserToRoleConstraint>().Count(expression);
		
		    return count;
		}
		
		internal static UserToRoleConstraint CreateInternal(UserToRoleConstraintDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToRoleConstraint oaObj = new UserToRoleConstraint();
		
			oaObj.UrConstraintId = dtObj.UrConstraintId;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enable = dtObj.Enable;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserToRoleConstraint Create(UserToRoleConstraintDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserToRoleConstraint UpdateOrCreateInternal(UserToRoleConstraintDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToRoleConstraint oaObj = (from t in context.GetAll<UserToRoleConstraint>() where
							t.UrConstraintId == dtObj.UrConstraintId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enable = dtObj.Enable;
			return oaObj;
		}
		
		public UserToRoleConstraint UpdateOrCreate(UserToRoleConstraintDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserToRoleConstraintDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserToRoleConstraint oaObj = (from t in this.Context.GetAll<UserToRoleConstraint>() where
								t.UrConstraintId == dtObj.UrConstraintId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserToRoleConstraintDto GetDto(UserToRoleConstraint oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserToRoleConstraintDto dtObj = new UserToRoleConstraintDto();
			dtObj.UrConstraintId = oaObj.UrConstraintId;
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UserId = oaObj.UserId;
			dtObj.RoleId = oaObj.RoleId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Enable = oaObj.Enable;
			
			return dtObj;
		}
		
		public static IList<UserToRoleConstraintDto> GetDtos(IQueryable<UserToRoleConstraint> oaObjects)
		{
			IList<UserToRoleConstraintDto> dtObjects = new List<UserToRoleConstraintDto>();
			foreach(UserToRoleConstraint oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserToRoleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserToRole, UserToRoleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserToRoleDto FindSingle(Expression<Func<UserToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserToRole oaObj = this.Context.GetAll<UserToRole>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserToRoleDto> Find(Expression<Func<UserToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserToRole> oaObjects = this.Context.GetAll<UserToRole>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserToRole> GetQueryable()
		{    
		    IQueryable<UserToRole> oaObjects = this.Context.GetAll<UserToRole>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserToRole>().Count(expression);
		
		    return count;
		}
		
		internal static UserToRole CreateInternal(UserToRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToRole oaObj = new UserToRole();
		
			oaObj.UrId = dtObj.UrId;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserToRole Create(UserToRoleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserToRole UpdateOrCreateInternal(UserToRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToRole oaObj = (from t in context.GetAll<UserToRole>() where
							t.UrId == dtObj.UrId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			return oaObj;
		}
		
		public UserToRole UpdateOrCreate(UserToRoleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserToRoleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserToRole oaObj = (from t in this.Context.GetAll<UserToRole>() where
								t.UrId == dtObj.UrId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserToRoleDto GetDto(UserToRole oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserToRoleDto dtObj = new UserToRoleDto();
			dtObj.UrId = oaObj.UrId;
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UserId = oaObj.UserId;
			dtObj.RoleId = oaObj.RoleId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Enabled = oaObj.Enabled;
			
			return dtObj;
		}
		
		public static IList<UserToRoleDto> GetDtos(IQueryable<UserToRole> oaObjects)
		{
			IList<UserToRoleDto> dtObjects = new List<UserToRoleDto>();
			foreach(UserToRole oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserToGroupRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserToGroup, UserToGroupDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserToGroupDto FindSingle(Expression<Func<UserToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserToGroup oaObj = this.Context.GetAll<UserToGroup>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserToGroupDto> Find(Expression<Func<UserToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserToGroup> oaObjects = this.Context.GetAll<UserToGroup>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserToGroup> GetQueryable()
		{    
		    IQueryable<UserToGroup> oaObjects = this.Context.GetAll<UserToGroup>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserToGroup>().Count(expression);
		
		    return count;
		}
		
		internal static UserToGroup CreateInternal(UserToGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToGroup oaObj = new UserToGroup();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UgId = dtObj.UgId;
			oaObj.UserId = dtObj.UserId;
			oaObj.GroupId = dtObj.GroupId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserToGroup Create(UserToGroupDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserToGroup UpdateOrCreateInternal(UserToGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToGroup oaObj = (from t in context.GetAll<UserToGroup>() where
							t.UgId == dtObj.UgId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.GroupId = dtObj.GroupId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public UserToGroup UpdateOrCreate(UserToGroupDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserToGroupDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserToGroup oaObj = (from t in this.Context.GetAll<UserToGroup>() where
								t.UgId == dtObj.UgId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserToGroupDto GetDto(UserToGroup oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserToGroupDto dtObj = new UserToGroupDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UgId = oaObj.UgId;
			dtObj.UserId = oaObj.UserId;
			dtObj.GroupId = oaObj.GroupId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<UserToGroupDto> GetDtos(IQueryable<UserToGroup> oaObjects)
		{
			IList<UserToGroupDto> dtObjects = new List<UserToGroupDto>();
			foreach(UserToGroup oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserToCompanyRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserToCompany, UserToCompanyDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserToCompanyDto FindSingle(Expression<Func<UserToCompany, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserToCompany oaObj = this.Context.GetAll<UserToCompany>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserToCompanyDto> Find(Expression<Func<UserToCompany, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserToCompany> oaObjects = this.Context.GetAll<UserToCompany>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserToCompany> GetQueryable()
		{    
		    IQueryable<UserToCompany> oaObjects = this.Context.GetAll<UserToCompany>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserToCompany, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserToCompany>().Count(expression);
		
		    return count;
		}
		
		internal static UserToCompany CreateInternal(UserToCompanyDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToCompany oaObj = new UserToCompany();
		
			oaObj.UserToCompanyId = dtObj.UserToCompanyId;
			oaObj.ToDate = dtObj.ToDate;
			oaObj.SecurityUserId = dtObj.SecurityUserId;
			oaObj.CompanyId = dtObj.CompanyId;
			oaObj.FromDate = dtObj.FromDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserToCompany Create(UserToCompanyDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserToCompany UpdateOrCreateInternal(UserToCompanyDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserToCompany oaObj = (from t in context.GetAll<UserToCompany>() where
							t.UserToCompanyId == dtObj.UserToCompanyId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.ToDate = dtObj.ToDate;
			oaObj.SecurityUserId = dtObj.SecurityUserId;
			oaObj.CompanyId = dtObj.CompanyId;
			oaObj.FromDate = dtObj.FromDate;
			return oaObj;
		}
		
		public UserToCompany UpdateOrCreate(UserToCompanyDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserToCompanyDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserToCompany oaObj = (from t in this.Context.GetAll<UserToCompany>() where
								t.UserToCompanyId == dtObj.UserToCompanyId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserToCompanyDto GetDto(UserToCompany oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserToCompanyDto dtObj = new UserToCompanyDto();
			dtObj.UserToCompanyId = oaObj.UserToCompanyId;
			dtObj.ToDate = oaObj.ToDate;
			dtObj.SecurityUserId = oaObj.SecurityUserId;
			dtObj.CompanyId = oaObj.CompanyId;
			dtObj.FromDate = oaObj.FromDate;
			
			return dtObj;
		}
		
		public static IList<UserToCompanyDto> GetDtos(IQueryable<UserToCompany> oaObjects)
		{
			IList<UserToCompanyDto> dtObjects = new List<UserToCompanyDto>();
			foreach(UserToCompany oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserResourceScopeRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserResourceScope, UserResourceScopeDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserResourceScopeDto FindSingle(Expression<Func<UserResourceScope, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserResourceScope oaObj = this.Context.GetAll<UserResourceScope>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserResourceScopeDto> Find(Expression<Func<UserResourceScope, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserResourceScope> oaObjects = this.Context.GetAll<UserResourceScope>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserResourceScope> GetQueryable()
		{    
		    IQueryable<UserResourceScope> oaObjects = this.Context.GetAll<UserResourceScope>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserResourceScope, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserResourceScope>().Count(expression);
		
		    return count;
		}
		
		internal static UserResourceScope CreateInternal(UserResourceScopeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserResourceScope oaObj = new UserResourceScope();
		
			oaObj.UserResourceScopeId = dtObj.UserResourceScopeId;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.ScopeId = dtObj.ScopeId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserResourceScope Create(UserResourceScopeDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserResourceScope UpdateOrCreateInternal(UserResourceScopeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserResourceScope oaObj = (from t in context.GetAll<UserResourceScope>() where
							t.UserResourceScopeId == dtObj.UserResourceScopeId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.ScopeId = dtObj.ScopeId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public UserResourceScope UpdateOrCreate(UserResourceScopeDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserResourceScopeDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserResourceScope oaObj = (from t in this.Context.GetAll<UserResourceScope>() where
								t.UserResourceScopeId == dtObj.UserResourceScopeId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserResourceScopeDto GetDto(UserResourceScope oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserResourceScopeDto dtObj = new UserResourceScopeDto();
			dtObj.UserResourceScopeId = oaObj.UserResourceScopeId;
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UserId = oaObj.UserId;
			dtObj.ResourceId = oaObj.ResourceId;
			dtObj.ScopeId = oaObj.ScopeId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<UserResourceScopeDto> GetDtos(IQueryable<UserResourceScope> oaObjects)
		{
			IList<UserResourceScopeDto> dtObjects = new List<UserResourceScopeDto>();
			foreach(UserResourceScope oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserProfileRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserProfile, UserProfileDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserProfileDto FindSingle(Expression<Func<UserProfile, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserProfile oaObj = this.Context.GetAll<UserProfile>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserProfileDto> Find(Expression<Func<UserProfile, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserProfile> oaObjects = this.Context.GetAll<UserProfile>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserProfile> GetQueryable()
		{    
		    IQueryable<UserProfile> oaObjects = this.Context.GetAll<UserProfile>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserProfile, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserProfile>().Count(expression);
		
		    return count;
		}
		
		internal static UserProfile CreateInternal(UserProfileDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserProfile oaObj = new UserProfile();
		
			oaObj.UserProfileId = dtObj.UserProfileId;
			oaObj.UserId = dtObj.UserId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserProfile Create(UserProfileDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserProfile UpdateOrCreateInternal(UserProfileDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserProfile oaObj = (from t in context.GetAll<UserProfile>() where
							t.UserProfileId == dtObj.UserProfileId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UserId = dtObj.UserId;
			return oaObj;
		}
		
		public UserProfile UpdateOrCreate(UserProfileDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserProfileDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserProfile oaObj = (from t in this.Context.GetAll<UserProfile>() where
								t.UserProfileId == dtObj.UserProfileId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserProfileDto GetDto(UserProfile oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserProfileDto dtObj = new UserProfileDto();
			dtObj.UserProfileId = oaObj.UserProfileId;
			dtObj.UserId = oaObj.UserId;
			
			return dtObj;
		}
		
		public static IList<UserProfileDto> GetDtos(IQueryable<UserProfile> oaObjects)
		{
			IList<UserProfileDto> dtObjects = new List<UserProfileDto>();
			foreach(UserProfile oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class UserLogRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<UserLog, UserLogDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public UserLogDto FindSingle(Expression<Func<UserLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    UserLog oaObj = this.Context.GetAll<UserLog>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<UserLogDto> Find(Expression<Func<UserLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<UserLog> oaObjects = this.Context.GetAll<UserLog>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<UserLog> GetQueryable()
		{    
		    IQueryable<UserLog> oaObjects = this.Context.GetAll<UserLog>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<UserLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<UserLog>().Count(expression);
		
		    return count;
		}
		
		internal static UserLog CreateInternal(UserLogDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserLog oaObj = new UserLog();
		
			oaObj.UserLogId = dtObj.UserLogId;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.RunType = dtObj.RunType;
			oaObj.OperationId = dtObj.OperationId;
			oaObj.LogDateTime = dtObj.LogDateTime;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.ComputerName = dtObj.ComputerName;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public UserLog Create(UserLogDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static UserLog UpdateOrCreateInternal(UserLogDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			UserLog oaObj = (from t in context.GetAll<UserLog>() where
							t.UserLogId == dtObj.UserLogId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.RunType = dtObj.RunType;
			oaObj.OperationId = dtObj.OperationId;
			oaObj.LogDateTime = dtObj.LogDateTime;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.ComputerName = dtObj.ComputerName;
			return oaObj;
		}
		
		public UserLog UpdateOrCreate(UserLogDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(UserLogDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			UserLog oaObj = (from t in this.Context.GetAll<UserLog>() where
								t.UserLogId == dtObj.UserLogId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static UserLogDto GetDto(UserLog oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			UserLogDto dtObj = new UserLogDto();
			dtObj.UserLogId = oaObj.UserLogId;
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UserId = oaObj.UserId;
			dtObj.ResourceId = oaObj.ResourceId;
			dtObj.RunType = oaObj.RunType;
			dtObj.OperationId = oaObj.OperationId;
			dtObj.LogDateTime = oaObj.LogDateTime;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.ComputerName = oaObj.ComputerName;
			
			return dtObj;
		}
		
		public static IList<UserLogDto> GetDtos(IQueryable<UserLog> oaObjects)
		{
			IList<UserLogDto> dtObjects = new List<UserLogDto>();
			foreach(UserLog oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class SoftwareDomainRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SoftwareDomain, SoftwareDomainDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SoftwareDomainDto FindSingle(Expression<Func<SoftwareDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SoftwareDomain oaObj = this.Context.GetAll<SoftwareDomain>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SoftwareDomainDto> Find(Expression<Func<SoftwareDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SoftwareDomain> oaObjects = this.Context.GetAll<SoftwareDomain>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SoftwareDomain> GetQueryable()
		{    
		    IQueryable<SoftwareDomain> oaObjects = this.Context.GetAll<SoftwareDomain>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SoftwareDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SoftwareDomain>().Count(expression);
		
		    return count;
		}
		
		internal static SoftwareDomain CreateInternal(SoftwareDomainDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SoftwareDomain oaObj = new SoftwareDomain();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Title = dtObj.Title;
			oaObj.SoftwareDomainId = dtObj.SoftwareDomainId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.Precedency = dtObj.Precedency;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SoftwareDomain Create(SoftwareDomainDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SoftwareDomain UpdateOrCreateInternal(SoftwareDomainDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SoftwareDomain oaObj = (from t in context.GetAll<SoftwareDomain>() where
							t.SoftwareDomainId == dtObj.SoftwareDomainId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Title = dtObj.Title;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.Precedency = dtObj.Precedency;
			return oaObj;
		}
		
		public SoftwareDomain UpdateOrCreate(SoftwareDomainDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SoftwareDomainDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SoftwareDomain oaObj = (from t in this.Context.GetAll<SoftwareDomain>() where
								t.SoftwareDomainId == dtObj.SoftwareDomainId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SoftwareDomainDto GetDto(SoftwareDomain oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SoftwareDomainDto dtObj = new SoftwareDomainDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.Title = oaObj.Title;
			dtObj.SoftwareDomainId = oaObj.SoftwareDomainId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.Precedency = oaObj.Precedency;
			
			return dtObj;
		}
		
		public static IList<SoftwareDomainDto> GetDtos(IQueryable<SoftwareDomain> oaObjects)
		{
			IList<SoftwareDomainDto> dtObjects = new List<SoftwareDomainDto>();
			foreach(SoftwareDomain oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class SecurityUserLogRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SecurityUserLog, SecurityUserLogDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SecurityUserLogDto FindSingle(Expression<Func<SecurityUserLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SecurityUserLog oaObj = this.Context.GetAll<SecurityUserLog>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SecurityUserLogDto> Find(Expression<Func<SecurityUserLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SecurityUserLog> oaObjects = this.Context.GetAll<SecurityUserLog>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SecurityUserLog> GetQueryable()
		{    
		    IQueryable<SecurityUserLog> oaObjects = this.Context.GetAll<SecurityUserLog>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SecurityUserLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SecurityUserLog>().Count(expression);
		
		    return count;
		}
		
		internal static SecurityUserLog CreateInternal(SecurityUserLogDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecurityUserLog oaObj = new SecurityUserLog();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Service = dtObj.Service;
			oaObj.UserId = dtObj.UserId;
			oaObj.SessionId = dtObj.SessionId;
			oaObj.SecurityUserLogId = dtObj.SecurityUserLogId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Description = dtObj.Description;
			oaObj.AppDomainId = dtObj.AppDomainId;
			oaObj.ActionParam = dtObj.ActionParam;
			oaObj.Action = dtObj.Action;
			oaObj.AccountId = dtObj.AccountId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SecurityUserLog Create(SecurityUserLogDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SecurityUserLog UpdateOrCreateInternal(SecurityUserLogDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecurityUserLog oaObj = (from t in context.GetAll<SecurityUserLog>() where
							t.SecurityUserLogId == dtObj.SecurityUserLogId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Service = dtObj.Service;
			oaObj.UserId = dtObj.UserId;
			oaObj.SessionId = dtObj.SessionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Description = dtObj.Description;
			oaObj.AppDomainId = dtObj.AppDomainId;
			oaObj.ActionParam = dtObj.ActionParam;
			oaObj.Action = dtObj.Action;
			oaObj.AccountId = dtObj.AccountId;
			return oaObj;
		}
		
		public SecurityUserLog UpdateOrCreate(SecurityUserLogDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SecurityUserLogDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SecurityUserLog oaObj = (from t in this.Context.GetAll<SecurityUserLog>() where
								t.SecurityUserLogId == dtObj.SecurityUserLogId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SecurityUserLogDto GetDto(SecurityUserLog oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SecurityUserLogDto dtObj = new SecurityUserLogDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.Service = oaObj.Service;
			dtObj.UserId = oaObj.UserId;
			dtObj.SessionId = oaObj.SessionId;
			dtObj.SecurityUserLogId = oaObj.SecurityUserLogId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Description = oaObj.Description;
			dtObj.AppDomainId = oaObj.AppDomainId;
			dtObj.ActionParam = oaObj.ActionParam;
			dtObj.Action = oaObj.Action;
			dtObj.AccountId = oaObj.AccountId;
			
			return dtObj;
		}
		
		public static IList<SecurityUserLogDto> GetDtos(IQueryable<SecurityUserLog> oaObjects)
		{
			IList<SecurityUserLogDto> dtObjects = new List<SecurityUserLogDto>();
			foreach(SecurityUserLog oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class SecuritySessionRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SecuritySession, SecuritySessionDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SecuritySessionDto FindSingle(Expression<Func<SecuritySession, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SecuritySession oaObj = this.Context.GetAll<SecuritySession>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SecuritySessionDto> Find(Expression<Func<SecuritySession, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SecuritySession> oaObjects = this.Context.GetAll<SecuritySession>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SecuritySession> GetQueryable()
		{    
		    IQueryable<SecuritySession> oaObjects = this.Context.GetAll<SecuritySession>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SecuritySession, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SecuritySession>().Count(expression);
		
		    return count;
		}
		
		internal static SecuritySession CreateInternal(SecuritySessionDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecuritySession oaObj = new SecuritySession();
		
			oaObj.SecuritySessionId = dtObj.SecuritySessionId;
			oaObj.ExpiredDate = dtObj.ExpiredDate;
			oaObj.CreateDate = dtObj.CreateDate;
			oaObj.AppDomainId = dtObj.AppDomainId;
			oaObj.AccountId = dtObj.AccountId;
			oaObj.RowId = dtObj.RowId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SecuritySession Create(SecuritySessionDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SecuritySession UpdateOrCreateInternal(SecuritySessionDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecuritySession oaObj = (from t in context.GetAll<SecuritySession>() where
							t.RowId == dtObj.RowId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.SecuritySessionId = dtObj.SecuritySessionId;
			oaObj.ExpiredDate = dtObj.ExpiredDate;
			oaObj.CreateDate = dtObj.CreateDate;
			oaObj.AppDomainId = dtObj.AppDomainId;
			oaObj.AccountId = dtObj.AccountId;
			return oaObj;
		}
		
		public SecuritySession UpdateOrCreate(SecuritySessionDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SecuritySessionDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SecuritySession oaObj = (from t in this.Context.GetAll<SecuritySession>() where
								t.RowId == dtObj.RowId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SecuritySessionDto GetDto(SecuritySession oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SecuritySessionDto dtObj = new SecuritySessionDto();
			dtObj.SecuritySessionId = oaObj.SecuritySessionId;
			dtObj.ExpiredDate = oaObj.ExpiredDate;
			dtObj.CreateDate = oaObj.CreateDate;
			dtObj.AppDomainId = oaObj.AppDomainId;
			dtObj.AccountId = oaObj.AccountId;
			dtObj.RowId = oaObj.RowId;
			
			return dtObj;
		}
		
		public static IList<SecuritySessionDto> GetDtos(IQueryable<SecuritySession> oaObjects)
		{
			IList<SecuritySessionDto> dtObjects = new List<SecuritySessionDto>();
			foreach(SecuritySession oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class SecurityResourceRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SecurityResource, SecurityResourceDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SecurityResourceDto FindSingle(Expression<Func<SecurityResource, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SecurityResource oaObj = this.Context.GetAll<SecurityResource>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SecurityResourceDto> Find(Expression<Func<SecurityResource, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SecurityResource> oaObjects = this.Context.GetAll<SecurityResource>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SecurityResource> GetQueryable()
		{    
		    IQueryable<SecurityResource> oaObjects = this.Context.GetAll<SecurityResource>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SecurityResource, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SecurityResource>().Count(expression);
		
		    return count;
		}
		
		internal static SecurityResource CreateInternal(SecurityResourceDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecurityResource oaObj = new SecurityResource();
		
			oaObj.UserDescription = dtObj.UserDescription;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ToolTip = dtObj.ToolTip;
			oaObj.SystemPassword = dtObj.SystemPassword;
			oaObj.SoftwareDomainId = dtObj.SoftwareDomainId;
			oaObj.SecurityResourceId = dtObj.SecurityResourceId;
			oaObj.ResourceTypeId = dtObj.ResourceTypeId;
			oaObj.ResourceName = dtObj.ResourceName;
			oaObj.Precedence = dtObj.Precedence;
			oaObj.Path = dtObj.Path;
			oaObj.ParentId = dtObj.ParentId;
			oaObj.Namespace = dtObj.Namespace;
			oaObj.LoginName = dtObj.LoginName;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Icon = dtObj.Icon;
			oaObj.HasParameter = dtObj.HasParameter;
			oaObj.HasItemAction = dtObj.HasItemAction;
			oaObj.ExecutableFile = dtObj.ExecutableFile;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.DisplayName = dtObj.DisplayName;
			oaObj.DevDescription = dtObj.DevDescription;
			oaObj.Call3 = dtObj.Call3;
			oaObj.Call2 = dtObj.Call2;
			oaObj.Call1 = dtObj.Call1;
			oaObj.AssemblyName = dtObj.AssemblyName;
			oaObj.AppDomainId = dtObj.AppDomainId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SecurityResource Create(SecurityResourceDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SecurityResource UpdateOrCreateInternal(SecurityResourceDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecurityResource oaObj = (from t in context.GetAll<SecurityResource>() where
							t.SecurityResourceId == dtObj.SecurityResourceId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UserDescription = dtObj.UserDescription;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ToolTip = dtObj.ToolTip;
			oaObj.SystemPassword = dtObj.SystemPassword;
			oaObj.SoftwareDomainId = dtObj.SoftwareDomainId;
			oaObj.ResourceTypeId = dtObj.ResourceTypeId;
			oaObj.ResourceName = dtObj.ResourceName;
			oaObj.Precedence = dtObj.Precedence;
			oaObj.Path = dtObj.Path;
			oaObj.ParentId = dtObj.ParentId;
			oaObj.Namespace = dtObj.Namespace;
			oaObj.LoginName = dtObj.LoginName;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Icon = dtObj.Icon;
			oaObj.HasParameter = dtObj.HasParameter;
			oaObj.HasItemAction = dtObj.HasItemAction;
			oaObj.ExecutableFile = dtObj.ExecutableFile;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.DisplayName = dtObj.DisplayName;
			oaObj.DevDescription = dtObj.DevDescription;
			oaObj.Call3 = dtObj.Call3;
			oaObj.Call2 = dtObj.Call2;
			oaObj.Call1 = dtObj.Call1;
			oaObj.AssemblyName = dtObj.AssemblyName;
			oaObj.AppDomainId = dtObj.AppDomainId;
			return oaObj;
		}
		
		public SecurityResource UpdateOrCreate(SecurityResourceDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SecurityResourceDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SecurityResource oaObj = (from t in this.Context.GetAll<SecurityResource>() where
								t.SecurityResourceId == dtObj.SecurityResourceId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SecurityResourceDto GetDto(SecurityResource oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SecurityResourceDto dtObj = new SecurityResourceDto();
			dtObj.UserDescription = oaObj.UserDescription;
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.ToolTip = oaObj.ToolTip;
			dtObj.SystemPassword = oaObj.SystemPassword;
			dtObj.SoftwareDomainId = oaObj.SoftwareDomainId;
			dtObj.SecurityResourceId = oaObj.SecurityResourceId;
			dtObj.ResourceTypeId = oaObj.ResourceTypeId;
			dtObj.ResourceName = oaObj.ResourceName;
			dtObj.Precedence = oaObj.Precedence;
			dtObj.Path = oaObj.Path;
			dtObj.ParentId = oaObj.ParentId;
			dtObj.Namespace = oaObj.Namespace;
			dtObj.LoginName = oaObj.LoginName;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Icon = oaObj.Icon;
			dtObj.HasParameter = oaObj.HasParameter;
			dtObj.HasItemAction = oaObj.HasItemAction;
			dtObj.ExecutableFile = oaObj.ExecutableFile;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.DisplayName = oaObj.DisplayName;
			dtObj.DevDescription = oaObj.DevDescription;
			dtObj.Call3 = oaObj.Call3;
			dtObj.Call2 = oaObj.Call2;
			dtObj.Call1 = oaObj.Call1;
			dtObj.AssemblyName = oaObj.AssemblyName;
			dtObj.AppDomainId = oaObj.AppDomainId;
			
			return dtObj;
		}
		
		public static IList<SecurityResourceDto> GetDtos(IQueryable<SecurityResource> oaObjects)
		{
			IList<SecurityResourceDto> dtObjects = new List<SecurityResourceDto>();
			foreach(SecurityResource oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class SecurityGroupRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SecurityGroup, SecurityGroupDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SecurityGroupDto FindSingle(Expression<Func<SecurityGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SecurityGroup oaObj = this.Context.GetAll<SecurityGroup>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SecurityGroupDto> Find(Expression<Func<SecurityGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SecurityGroup> oaObjects = this.Context.GetAll<SecurityGroup>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SecurityGroup> GetQueryable()
		{    
		    IQueryable<SecurityGroup> oaObjects = this.Context.GetAll<SecurityGroup>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SecurityGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SecurityGroup>().Count(expression);
		
		    return count;
		}
		
		internal static SecurityGroup CreateInternal(SecurityGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecurityGroup oaObj = new SecurityGroup();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.SecurityGroupId = dtObj.SecurityGroupId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.GroupName = dtObj.GroupName;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.DisplayName = dtObj.DisplayName;
			oaObj.AppDomainId = dtObj.AppDomainId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SecurityGroup Create(SecurityGroupDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SecurityGroup UpdateOrCreateInternal(SecurityGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SecurityGroup oaObj = (from t in context.GetAll<SecurityGroup>() where
							t.SecurityGroupId == dtObj.SecurityGroupId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.GroupName = dtObj.GroupName;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.DisplayName = dtObj.DisplayName;
			oaObj.AppDomainId = dtObj.AppDomainId;
			return oaObj;
		}
		
		public SecurityGroup UpdateOrCreate(SecurityGroupDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SecurityGroupDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SecurityGroup oaObj = (from t in this.Context.GetAll<SecurityGroup>() where
								t.SecurityGroupId == dtObj.SecurityGroupId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SecurityGroupDto GetDto(SecurityGroup oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SecurityGroupDto dtObj = new SecurityGroupDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.SecurityGroupId = oaObj.SecurityGroupId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.GroupName = oaObj.GroupName;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.DisplayName = oaObj.DisplayName;
			dtObj.AppDomainId = oaObj.AppDomainId;
			
			return dtObj;
		}
		
		public static IList<SecurityGroupDto> GetDtos(IQueryable<SecurityGroup> oaObjects)
		{
			IList<SecurityGroupDto> dtObjects = new List<SecurityGroupDto>();
			foreach(SecurityGroup oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ScopeRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Scope, ScopeDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ScopeDto FindSingle(Expression<Func<Scope, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Scope oaObj = this.Context.GetAll<Scope>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ScopeDto> Find(Expression<Func<Scope, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Scope> oaObjects = this.Context.GetAll<Scope>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Scope> GetQueryable()
		{    
		    IQueryable<Scope> oaObjects = this.Context.GetAll<Scope>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Scope, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Scope>().Count(expression);
		
		    return count;
		}
		
		internal static Scope CreateInternal(ScopeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Scope oaObj = new Scope();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ScopeName = dtObj.ScopeName;
			oaObj.ScopeId = dtObj.ScopeId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.DisplayName = dtObj.DisplayName;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Scope Create(ScopeDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Scope UpdateOrCreateInternal(ScopeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Scope oaObj = (from t in context.GetAll<Scope>() where
							t.ScopeId == dtObj.ScopeId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ScopeName = dtObj.ScopeName;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.DisplayName = dtObj.DisplayName;
			return oaObj;
		}
		
		public Scope UpdateOrCreate(ScopeDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ScopeDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Scope oaObj = (from t in this.Context.GetAll<Scope>() where
								t.ScopeId == dtObj.ScopeId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ScopeDto GetDto(Scope oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ScopeDto dtObj = new ScopeDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.ScopeName = oaObj.ScopeName;
			dtObj.ScopeId = oaObj.ScopeId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.DisplayName = oaObj.DisplayName;
			
			return dtObj;
		}
		
		public static IList<ScopeDto> GetDtos(IQueryable<Scope> oaObjects)
		{
			IList<ScopeDto> dtObjects = new List<ScopeDto>();
			foreach(Scope oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class RoleToRoleConstraintRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<RoleToRoleConstraint, RoleToRoleConstraintDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public RoleToRoleConstraintDto FindSingle(Expression<Func<RoleToRoleConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    RoleToRoleConstraint oaObj = this.Context.GetAll<RoleToRoleConstraint>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<RoleToRoleConstraintDto> Find(Expression<Func<RoleToRoleConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<RoleToRoleConstraint> oaObjects = this.Context.GetAll<RoleToRoleConstraint>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<RoleToRoleConstraint> GetQueryable()
		{    
		    IQueryable<RoleToRoleConstraint> oaObjects = this.Context.GetAll<RoleToRoleConstraint>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<RoleToRoleConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<RoleToRoleConstraint>().Count(expression);
		
		    return count;
		}
		
		internal static RoleToRoleConstraint CreateInternal(RoleToRoleConstraintDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			RoleToRoleConstraint oaObj = new RoleToRoleConstraint();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.RrConstraintId = dtObj.RrConstraintId;
			oaObj.SourceRoleId = dtObj.SourceRoleId;
			oaObj.DestRoleId = dtObj.DestRoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enable = dtObj.Enable;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public RoleToRoleConstraint Create(RoleToRoleConstraintDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static RoleToRoleConstraint UpdateOrCreateInternal(RoleToRoleConstraintDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			RoleToRoleConstraint oaObj = (from t in context.GetAll<RoleToRoleConstraint>() where
							t.RrConstraintId == dtObj.RrConstraintId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.SourceRoleId = dtObj.SourceRoleId;
			oaObj.DestRoleId = dtObj.DestRoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enable = dtObj.Enable;
			return oaObj;
		}
		
		public RoleToRoleConstraint UpdateOrCreate(RoleToRoleConstraintDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(RoleToRoleConstraintDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			RoleToRoleConstraint oaObj = (from t in this.Context.GetAll<RoleToRoleConstraint>() where
								t.RrConstraintId == dtObj.RrConstraintId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static RoleToRoleConstraintDto GetDto(RoleToRoleConstraint oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			RoleToRoleConstraintDto dtObj = new RoleToRoleConstraintDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.RrConstraintId = oaObj.RrConstraintId;
			dtObj.SourceRoleId = oaObj.SourceRoleId;
			dtObj.DestRoleId = oaObj.DestRoleId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Enable = oaObj.Enable;
			
			return dtObj;
		}
		
		public static IList<RoleToRoleConstraintDto> GetDtos(IQueryable<RoleToRoleConstraint> oaObjects)
		{
			IList<RoleToRoleConstraintDto> dtObjects = new List<RoleToRoleConstraintDto>();
			foreach(RoleToRoleConstraint oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class RoleToRoleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<RoleToRole, RoleToRoleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public RoleToRoleDto FindSingle(Expression<Func<RoleToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    RoleToRole oaObj = this.Context.GetAll<RoleToRole>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<RoleToRoleDto> Find(Expression<Func<RoleToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<RoleToRole> oaObjects = this.Context.GetAll<RoleToRole>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<RoleToRole> GetQueryable()
		{    
		    IQueryable<RoleToRole> oaObjects = this.Context.GetAll<RoleToRole>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<RoleToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<RoleToRole>().Count(expression);
		
		    return count;
		}
		
		internal static RoleToRole CreateInternal(RoleToRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			RoleToRole oaObj = new RoleToRole();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.RrId = dtObj.RrId;
			oaObj.ParentRoleId = dtObj.ParentRoleId;
			oaObj.ChildRoleId = dtObj.ChildRoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public RoleToRole Create(RoleToRoleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static RoleToRole UpdateOrCreateInternal(RoleToRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			RoleToRole oaObj = (from t in context.GetAll<RoleToRole>() where
							t.RrId == dtObj.RrId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ParentRoleId = dtObj.ParentRoleId;
			oaObj.ChildRoleId = dtObj.ChildRoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public RoleToRole UpdateOrCreate(RoleToRoleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(RoleToRoleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			RoleToRole oaObj = (from t in this.Context.GetAll<RoleToRole>() where
								t.RrId == dtObj.RrId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static RoleToRoleDto GetDto(RoleToRole oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			RoleToRoleDto dtObj = new RoleToRoleDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.RrId = oaObj.RrId;
			dtObj.ParentRoleId = oaObj.ParentRoleId;
			dtObj.ChildRoleId = oaObj.ChildRoleId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<RoleToRoleDto> GetDtos(IQueryable<RoleToRole> oaObjects)
		{
			IList<RoleToRoleDto> dtObjects = new List<RoleToRoleDto>();
			foreach(RoleToRole oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class RoleToGroupRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<RoleToGroup, RoleToGroupDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public RoleToGroupDto FindSingle(Expression<Func<RoleToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    RoleToGroup oaObj = this.Context.GetAll<RoleToGroup>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<RoleToGroupDto> Find(Expression<Func<RoleToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<RoleToGroup> oaObjects = this.Context.GetAll<RoleToGroup>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<RoleToGroup> GetQueryable()
		{    
		    IQueryable<RoleToGroup> oaObjects = this.Context.GetAll<RoleToGroup>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<RoleToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<RoleToGroup>().Count(expression);
		
		    return count;
		}
		
		internal static RoleToGroup CreateInternal(RoleToGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			RoleToGroup oaObj = new RoleToGroup();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.GroupId = dtObj.GroupId;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.RgId = dtObj.RgId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public RoleToGroup Create(RoleToGroupDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static RoleToGroup UpdateOrCreateInternal(RoleToGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			RoleToGroup oaObj = (from t in context.GetAll<RoleToGroup>() where
							t.RgId == dtObj.RgId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.GroupId = dtObj.GroupId;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public RoleToGroup UpdateOrCreate(RoleToGroupDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(RoleToGroupDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			RoleToGroup oaObj = (from t in this.Context.GetAll<RoleToGroup>() where
								t.RgId == dtObj.RgId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static RoleToGroupDto GetDto(RoleToGroup oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			RoleToGroupDto dtObj = new RoleToGroupDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.GroupId = oaObj.GroupId;
			dtObj.RoleId = oaObj.RoleId;
			dtObj.RgId = oaObj.RgId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<RoleToGroupDto> GetDtos(IQueryable<RoleToGroup> oaObjects)
		{
			IList<RoleToGroupDto> dtObjects = new List<RoleToGroupDto>();
			foreach(RoleToGroup oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class RoleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Role, RoleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public RoleDto FindSingle(Expression<Func<Role, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Role oaObj = this.Context.GetAll<Role>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<RoleDto> Find(Expression<Func<Role, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Role> oaObjects = this.Context.GetAll<Role>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Role> GetQueryable()
		{    
		    IQueryable<Role> oaObjects = this.Context.GetAll<Role>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Role, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Role>().Count(expression);
		
		    return count;
		}
		
		internal static Role CreateInternal(RoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Role oaObj = new Role();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.RoleName = dtObj.RoleName;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.ParentRoleId = dtObj.ParentRoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.CondidateRoleName = dtObj.CondidateRoleName;
			oaObj.AppDomainId = dtObj.AppDomainId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Role Create(RoleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Role UpdateOrCreateInternal(RoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Role oaObj = (from t in context.GetAll<Role>() where
							t.RoleId == dtObj.RoleId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.RoleName = dtObj.RoleName;
			oaObj.ParentRoleId = dtObj.ParentRoleId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.CondidateRoleName = dtObj.CondidateRoleName;
			oaObj.AppDomainId = dtObj.AppDomainId;
			return oaObj;
		}
		
		public Role UpdateOrCreate(RoleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(RoleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Role oaObj = (from t in this.Context.GetAll<Role>() where
								t.RoleId == dtObj.RoleId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static RoleDto GetDto(Role oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			RoleDto dtObj = new RoleDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.RoleName = oaObj.RoleName;
			dtObj.RoleId = oaObj.RoleId;
			dtObj.ParentRoleId = oaObj.ParentRoleId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.CondidateRoleName = oaObj.CondidateRoleName;
			dtObj.AppDomainId = oaObj.AppDomainId;
			
			return dtObj;
		}
		
		public static IList<RoleDto> GetDtos(IQueryable<Role> oaObjects)
		{
			IList<RoleDto> dtObjects = new List<RoleDto>();
			foreach(Role oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ResourceTypeRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<ResourceType, ResourceTypeDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ResourceTypeDto FindSingle(Expression<Func<ResourceType, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    ResourceType oaObj = this.Context.GetAll<ResourceType>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ResourceTypeDto> Find(Expression<Func<ResourceType, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<ResourceType> oaObjects = this.Context.GetAll<ResourceType>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<ResourceType> GetQueryable()
		{    
		    IQueryable<ResourceType> oaObjects = this.Context.GetAll<ResourceType>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<ResourceType, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<ResourceType>().Count(expression);
		
		    return count;
		}
		
		internal static ResourceType CreateInternal(ResourceTypeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ResourceType oaObj = new ResourceType();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Title = dtObj.Title;
			oaObj.ResourceTypeId = dtObj.ResourceTypeId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public ResourceType Create(ResourceTypeDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static ResourceType UpdateOrCreateInternal(ResourceTypeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ResourceType oaObj = (from t in context.GetAll<ResourceType>() where
							t.ResourceTypeId == dtObj.ResourceTypeId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Title = dtObj.Title;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public ResourceType UpdateOrCreate(ResourceTypeDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ResourceTypeDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			ResourceType oaObj = (from t in this.Context.GetAll<ResourceType>() where
								t.ResourceTypeId == dtObj.ResourceTypeId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ResourceTypeDto GetDto(ResourceType oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ResourceTypeDto dtObj = new ResourceTypeDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.Title = oaObj.Title;
			dtObj.ResourceTypeId = oaObj.ResourceTypeId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<ResourceTypeDto> GetDtos(IQueryable<ResourceType> oaObjects)
		{
			IList<ResourceTypeDto> dtObjects = new List<ResourceTypeDto>();
			foreach(ResourceType oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ResourceToOperationRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<ResourceToOperation, ResourceToOperationDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ResourceToOperationDto FindSingle(Expression<Func<ResourceToOperation, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    ResourceToOperation oaObj = this.Context.GetAll<ResourceToOperation>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ResourceToOperationDto> Find(Expression<Func<ResourceToOperation, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<ResourceToOperation> oaObjects = this.Context.GetAll<ResourceToOperation>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<ResourceToOperation> GetQueryable()
		{    
		    IQueryable<ResourceToOperation> oaObjects = this.Context.GetAll<ResourceToOperation>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<ResourceToOperation, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<ResourceToOperation>().Count(expression);
		
		    return count;
		}
		
		internal static ResourceToOperation CreateInternal(ResourceToOperationDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ResourceToOperation oaObj = new ResourceToOperation();
		
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.ResourceToOperationId = dtObj.ResourceToOperationId;
			oaObj.OperationId = dtObj.OperationId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public ResourceToOperation Create(ResourceToOperationDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static ResourceToOperation UpdateOrCreateInternal(ResourceToOperationDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ResourceToOperation oaObj = (from t in context.GetAll<ResourceToOperation>() where
							t.ResourceToOperationId == dtObj.ResourceToOperationId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.OperationId = dtObj.OperationId;
			return oaObj;
		}
		
		public ResourceToOperation UpdateOrCreate(ResourceToOperationDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ResourceToOperationDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			ResourceToOperation oaObj = (from t in this.Context.GetAll<ResourceToOperation>() where
								t.ResourceToOperationId == dtObj.ResourceToOperationId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ResourceToOperationDto GetDto(ResourceToOperation oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ResourceToOperationDto dtObj = new ResourceToOperationDto();
			dtObj.ResourceId = oaObj.ResourceId;
			dtObj.ResourceToOperationId = oaObj.ResourceToOperationId;
			dtObj.OperationId = oaObj.OperationId;
			
			return dtObj;
		}
		
		public static IList<ResourceToOperationDto> GetDtos(IQueryable<ResourceToOperation> oaObjects)
		{
			IList<ResourceToOperationDto> dtObjects = new List<ResourceToOperationDto>();
			foreach(ResourceToOperation oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class PermissionToUserRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<PermissionToUser, PermissionToUserDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public PermissionToUserDto FindSingle(Expression<Func<PermissionToUser, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    PermissionToUser oaObj = this.Context.GetAll<PermissionToUser>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<PermissionToUserDto> Find(Expression<Func<PermissionToUser, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<PermissionToUser> oaObjects = this.Context.GetAll<PermissionToUser>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<PermissionToUser> GetQueryable()
		{    
		    IQueryable<PermissionToUser> oaObjects = this.Context.GetAll<PermissionToUser>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<PermissionToUser, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<PermissionToUser>().Count(expression);
		
		    return count;
		}
		
		internal static PermissionToUser CreateInternal(PermissionToUserDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			PermissionToUser oaObj = new PermissionToUser();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.PermissionToUserId = dtObj.PermissionToUserId;
			oaObj.PermissionAccess = dtObj.PermissionAccess;
			oaObj.PermissionId = dtObj.PermissionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public PermissionToUser Create(PermissionToUserDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static PermissionToUser UpdateOrCreateInternal(PermissionToUserDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			PermissionToUser oaObj = (from t in context.GetAll<PermissionToUser>() where
							t.PermissionToUserId == dtObj.PermissionToUserId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.PermissionAccess = dtObj.PermissionAccess;
			oaObj.PermissionId = dtObj.PermissionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public PermissionToUser UpdateOrCreate(PermissionToUserDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(PermissionToUserDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			PermissionToUser oaObj = (from t in this.Context.GetAll<PermissionToUser>() where
								t.PermissionToUserId == dtObj.PermissionToUserId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static PermissionToUserDto GetDto(PermissionToUser oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			PermissionToUserDto dtObj = new PermissionToUserDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UserId = oaObj.UserId;
			dtObj.PermissionToUserId = oaObj.PermissionToUserId;
			dtObj.PermissionAccess = oaObj.PermissionAccess;
			dtObj.PermissionId = oaObj.PermissionId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<PermissionToUserDto> GetDtos(IQueryable<PermissionToUser> oaObjects)
		{
			IList<PermissionToUserDto> dtObjects = new List<PermissionToUserDto>();
			foreach(PermissionToUser oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class PermissionToRoleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<PermissionToRole, PermissionToRoleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public PermissionToRoleDto FindSingle(Expression<Func<PermissionToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    PermissionToRole oaObj = this.Context.GetAll<PermissionToRole>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<PermissionToRoleDto> Find(Expression<Func<PermissionToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<PermissionToRole> oaObjects = this.Context.GetAll<PermissionToRole>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<PermissionToRole> GetQueryable()
		{    
		    IQueryable<PermissionToRole> oaObjects = this.Context.GetAll<PermissionToRole>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<PermissionToRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<PermissionToRole>().Count(expression);
		
		    return count;
		}
		
		internal static PermissionToRole CreateInternal(PermissionToRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			PermissionToRole oaObj = new PermissionToRole();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.PermisssionAccess = dtObj.PermisssionAccess;
			oaObj.PermissionToRoleId = dtObj.PermissionToRoleId;
			oaObj.PermissionId = dtObj.PermissionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public PermissionToRole Create(PermissionToRoleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static PermissionToRole UpdateOrCreateInternal(PermissionToRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			PermissionToRole oaObj = (from t in context.GetAll<PermissionToRole>() where
							t.PermissionToRoleId == dtObj.PermissionToRoleId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.RoleId = dtObj.RoleId;
			oaObj.PermisssionAccess = dtObj.PermisssionAccess;
			oaObj.PermissionId = dtObj.PermissionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public PermissionToRole UpdateOrCreate(PermissionToRoleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(PermissionToRoleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			PermissionToRole oaObj = (from t in this.Context.GetAll<PermissionToRole>() where
								t.PermissionToRoleId == dtObj.PermissionToRoleId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static PermissionToRoleDto GetDto(PermissionToRole oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			PermissionToRoleDto dtObj = new PermissionToRoleDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.RoleId = oaObj.RoleId;
			dtObj.PermisssionAccess = oaObj.PermisssionAccess;
			dtObj.PermissionToRoleId = oaObj.PermissionToRoleId;
			dtObj.PermissionId = oaObj.PermissionId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<PermissionToRoleDto> GetDtos(IQueryable<PermissionToRole> oaObjects)
		{
			IList<PermissionToRoleDto> dtObjects = new List<PermissionToRoleDto>();
			foreach(PermissionToRole oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class PermissionRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Permission, PermissionDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public PermissionDto FindSingle(Expression<Func<Permission, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Permission oaObj = this.Context.GetAll<Permission>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<PermissionDto> Find(Expression<Func<Permission, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Permission> oaObjects = this.Context.GetAll<Permission>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Permission> GetQueryable()
		{    
		    IQueryable<Permission> oaObjects = this.Context.GetAll<Permission>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Permission, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Permission>().Count(expression);
		
		    return count;
		}
		
		internal static Permission CreateInternal(PermissionDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Permission oaObj = new Permission();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.PermissionId = dtObj.PermissionId;
			oaObj.OperationId = dtObj.OperationId;
			oaObj.IsDefault = dtObj.IsDefault;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Comments = dtObj.Comments;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Permission Create(PermissionDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Permission UpdateOrCreateInternal(PermissionDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Permission oaObj = (from t in context.GetAll<Permission>() where
							t.PermissionId == dtObj.PermissionId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ResourceId = dtObj.ResourceId;
			oaObj.OperationId = dtObj.OperationId;
			oaObj.IsDefault = dtObj.IsDefault;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Comments = dtObj.Comments;
			return oaObj;
		}
		
		public Permission UpdateOrCreate(PermissionDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(PermissionDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Permission oaObj = (from t in this.Context.GetAll<Permission>() where
								t.PermissionId == dtObj.PermissionId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static PermissionDto GetDto(Permission oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			PermissionDto dtObj = new PermissionDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.ResourceId = oaObj.ResourceId;
			dtObj.PermissionId = oaObj.PermissionId;
			dtObj.OperationId = oaObj.OperationId;
			dtObj.IsDefault = oaObj.IsDefault;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Comments = oaObj.Comments;
			
			return dtObj;
		}
		
		public static IList<PermissionDto> GetDtos(IQueryable<Permission> oaObjects)
		{
			IList<PermissionDto> dtObjects = new List<PermissionDto>();
			foreach(Permission oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class PasswordHistoryRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<PasswordHistory, PasswordHistoryDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public PasswordHistoryDto FindSingle(Expression<Func<PasswordHistory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    PasswordHistory oaObj = this.Context.GetAll<PasswordHistory>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<PasswordHistoryDto> Find(Expression<Func<PasswordHistory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<PasswordHistory> oaObjects = this.Context.GetAll<PasswordHistory>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<PasswordHistory> GetQueryable()
		{    
		    IQueryable<PasswordHistory> oaObjects = this.Context.GetAll<PasswordHistory>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<PasswordHistory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<PasswordHistory>().Count(expression);
		
		    return count;
		}
		
		internal static PasswordHistory CreateInternal(PasswordHistoryDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			PasswordHistory oaObj = new PasswordHistory();
		
			oaObj.UserId = dtObj.UserId;
			oaObj.PasswordHistoryId = dtObj.PasswordHistoryId;
			oaObj.Password = dtObj.Password;
			oaObj.ChangeDate = dtObj.ChangeDate;
			oaObj.AccountId = dtObj.AccountId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public PasswordHistory Create(PasswordHistoryDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static PasswordHistory UpdateOrCreateInternal(PasswordHistoryDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			PasswordHistory oaObj = (from t in context.GetAll<PasswordHistory>() where
							t.PasswordHistoryId == dtObj.PasswordHistoryId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UserId = dtObj.UserId;
			oaObj.Password = dtObj.Password;
			oaObj.ChangeDate = dtObj.ChangeDate;
			oaObj.AccountId = dtObj.AccountId;
			return oaObj;
		}
		
		public PasswordHistory UpdateOrCreate(PasswordHistoryDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(PasswordHistoryDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			PasswordHistory oaObj = (from t in this.Context.GetAll<PasswordHistory>() where
								t.PasswordHistoryId == dtObj.PasswordHistoryId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static PasswordHistoryDto GetDto(PasswordHistory oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			PasswordHistoryDto dtObj = new PasswordHistoryDto();
			dtObj.UserId = oaObj.UserId;
			dtObj.PasswordHistoryId = oaObj.PasswordHistoryId;
			dtObj.Password = oaObj.Password;
			dtObj.ChangeDate = oaObj.ChangeDate;
			dtObj.AccountId = oaObj.AccountId;
			
			return dtObj;
		}
		
		public static IList<PasswordHistoryDto> GetDtos(IQueryable<PasswordHistory> oaObjects)
		{
			IList<PasswordHistoryDto> dtObjects = new List<PasswordHistoryDto>();
			foreach(PasswordHistory oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class OperationConstraintRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<OperationConstraint, OperationConstraintDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public OperationConstraintDto FindSingle(Expression<Func<OperationConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    OperationConstraint oaObj = this.Context.GetAll<OperationConstraint>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<OperationConstraintDto> Find(Expression<Func<OperationConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<OperationConstraint> oaObjects = this.Context.GetAll<OperationConstraint>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<OperationConstraint> GetQueryable()
		{    
		    IQueryable<OperationConstraint> oaObjects = this.Context.GetAll<OperationConstraint>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<OperationConstraint, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<OperationConstraint>().Count(expression);
		
		    return count;
		}
		
		internal static OperationConstraint CreateInternal(OperationConstraintDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			OperationConstraint oaObj = new OperationConstraint();
		
			oaObj.OperationConstraintId = dtObj.OperationConstraintId;
			oaObj.SrcOperationId = dtObj.SrcOperationId;
			oaObj.DestOperationId = dtObj.DestOperationId;
			oaObj.Enabled = dtObj.Enabled;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public OperationConstraint Create(OperationConstraintDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static OperationConstraint UpdateOrCreateInternal(OperationConstraintDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			OperationConstraint oaObj = (from t in context.GetAll<OperationConstraint>() where
							t.OperationConstraintId == dtObj.OperationConstraintId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.SrcOperationId = dtObj.SrcOperationId;
			oaObj.DestOperationId = dtObj.DestOperationId;
			oaObj.Enabled = dtObj.Enabled;
			return oaObj;
		}
		
		public OperationConstraint UpdateOrCreate(OperationConstraintDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(OperationConstraintDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			OperationConstraint oaObj = (from t in this.Context.GetAll<OperationConstraint>() where
								t.OperationConstraintId == dtObj.OperationConstraintId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static OperationConstraintDto GetDto(OperationConstraint oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			OperationConstraintDto dtObj = new OperationConstraintDto();
			dtObj.OperationConstraintId = oaObj.OperationConstraintId;
			dtObj.SrcOperationId = oaObj.SrcOperationId;
			dtObj.DestOperationId = oaObj.DestOperationId;
			dtObj.Enabled = oaObj.Enabled;
			
			return dtObj;
		}
		
		public static IList<OperationConstraintDto> GetDtos(IQueryable<OperationConstraint> oaObjects)
		{
			IList<OperationConstraintDto> dtObjects = new List<OperationConstraintDto>();
			foreach(OperationConstraint oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class OperationRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Operation, OperationDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public OperationDto FindSingle(Expression<Func<Operation, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Operation oaObj = this.Context.GetAll<Operation>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<OperationDto> Find(Expression<Func<Operation, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Operation> oaObjects = this.Context.GetAll<Operation>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Operation> GetQueryable()
		{    
		    IQueryable<Operation> oaObjects = this.Context.GetAll<Operation>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Operation, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Operation>().Count(expression);
		
		    return count;
		}
		
		internal static Operation CreateInternal(OperationDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Operation oaObj = new Operation();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.OperationName = dtObj.OperationName;
			oaObj.OperationId = dtObj.OperationId;
			oaObj.IsDefault = dtObj.IsDefault;
			oaObj.IsActionId = dtObj.IsActionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.DisplayName = dtObj.DisplayName;
			oaObj.Description = dtObj.Description;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Operation Create(OperationDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Operation UpdateOrCreateInternal(OperationDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Operation oaObj = (from t in context.GetAll<Operation>() where
							t.OperationId == dtObj.OperationId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.OperationName = dtObj.OperationName;
			oaObj.IsDefault = dtObj.IsDefault;
			oaObj.IsActionId = dtObj.IsActionId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.DisplayName = dtObj.DisplayName;
			oaObj.Description = dtObj.Description;
			return oaObj;
		}
		
		public Operation UpdateOrCreate(OperationDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(OperationDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Operation oaObj = (from t in this.Context.GetAll<Operation>() where
								t.OperationId == dtObj.OperationId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static OperationDto GetDto(Operation oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			OperationDto dtObj = new OperationDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.OperationName = oaObj.OperationName;
			dtObj.OperationId = oaObj.OperationId;
			dtObj.IsDefault = oaObj.IsDefault;
			dtObj.IsActionId = oaObj.IsActionId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.DisplayName = oaObj.DisplayName;
			dtObj.Description = oaObj.Description;
			
			return dtObj;
		}
		
		public static IList<OperationDto> GetDtos(IQueryable<Operation> oaObjects)
		{
			IList<OperationDto> dtObjects = new List<OperationDto>();
			foreach(Operation oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ManagementRoleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<ManagementRole, ManagementRoleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ManagementRoleDto FindSingle(Expression<Func<ManagementRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    ManagementRole oaObj = this.Context.GetAll<ManagementRole>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ManagementRoleDto> Find(Expression<Func<ManagementRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<ManagementRole> oaObjects = this.Context.GetAll<ManagementRole>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<ManagementRole> GetQueryable()
		{    
		    IQueryable<ManagementRole> oaObjects = this.Context.GetAll<ManagementRole>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<ManagementRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<ManagementRole>().Count(expression);
		
		    return count;
		}
		
		internal static ManagementRole CreateInternal(ManagementRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ManagementRole oaObj = new ManagementRole();
		
			oaObj.Title = dtObj.Title;
			oaObj.ManagementRoleId = dtObj.ManagementRoleId;
			oaObj.IsActive = dtObj.IsActive;
			oaObj.Description = dtObj.Description;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public ManagementRole Create(ManagementRoleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static ManagementRole UpdateOrCreateInternal(ManagementRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ManagementRole oaObj = (from t in context.GetAll<ManagementRole>() where
							t.ManagementRoleId == dtObj.ManagementRoleId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			oaObj.IsActive = dtObj.IsActive;
			oaObj.Description = dtObj.Description;
			return oaObj;
		}
		
		public ManagementRole UpdateOrCreate(ManagementRoleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ManagementRoleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			ManagementRole oaObj = (from t in this.Context.GetAll<ManagementRole>() where
								t.ManagementRoleId == dtObj.ManagementRoleId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ManagementRoleDto GetDto(ManagementRole oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ManagementRoleDto dtObj = new ManagementRoleDto();
			dtObj.Title = oaObj.Title;
			dtObj.ManagementRoleId = oaObj.ManagementRoleId;
			dtObj.IsActive = oaObj.IsActive;
			dtObj.Description = oaObj.Description;
			
			return dtObj;
		}
		
		public static IList<ManagementRoleDto> GetDtos(IQueryable<ManagementRole> oaObjects)
		{
			IList<ManagementRoleDto> dtObjects = new List<ManagementRoleDto>();
			foreach(ManagementRole oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ManagementLogRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<ManagementLog, ManagementLogDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ManagementLogDto FindSingle(Expression<Func<ManagementLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    ManagementLog oaObj = this.Context.GetAll<ManagementLog>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ManagementLogDto> Find(Expression<Func<ManagementLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<ManagementLog> oaObjects = this.Context.GetAll<ManagementLog>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<ManagementLog> GetQueryable()
		{    
		    IQueryable<ManagementLog> oaObjects = this.Context.GetAll<ManagementLog>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<ManagementLog, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<ManagementLog>().Count(expression);
		
		    return count;
		}
		
		internal static ManagementLog CreateInternal(ManagementLogDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ManagementLog oaObj = new ManagementLog();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Statues = dtObj.Statues;
			oaObj.Service = dtObj.Service;
			oaObj.UserId = dtObj.UserId;
			oaObj.Message = dtObj.Message;
			oaObj.ManagementLogId = dtObj.ManagementLogId;
			oaObj.LogType = dtObj.LogType;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public ManagementLog Create(ManagementLogDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static ManagementLog UpdateOrCreateInternal(ManagementLogDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ManagementLog oaObj = (from t in context.GetAll<ManagementLog>() where
							t.ManagementLogId == dtObj.ManagementLogId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Statues = dtObj.Statues;
			oaObj.Service = dtObj.Service;
			oaObj.UserId = dtObj.UserId;
			oaObj.Message = dtObj.Message;
			oaObj.LogType = dtObj.LogType;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public ManagementLog UpdateOrCreate(ManagementLogDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ManagementLogDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			ManagementLog oaObj = (from t in this.Context.GetAll<ManagementLog>() where
								t.ManagementLogId == dtObj.ManagementLogId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ManagementLogDto GetDto(ManagementLog oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ManagementLogDto dtObj = new ManagementLogDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.Statues = oaObj.Statues;
			dtObj.Service = oaObj.Service;
			dtObj.UserId = oaObj.UserId;
			dtObj.Message = oaObj.Message;
			dtObj.ManagementLogId = oaObj.ManagementLogId;
			dtObj.LogType = oaObj.LogType;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			
			return dtObj;
		}
		
		public static IList<ManagementLogDto> GetDtos(IQueryable<ManagementLog> oaObjects)
		{
			IList<ManagementLogDto> dtObjects = new List<ManagementLogDto>();
			foreach(ManagementLog oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ManagementAccountRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<ManagementAccount, ManagementAccountDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ManagementAccountDto FindSingle(Expression<Func<ManagementAccount, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    ManagementAccount oaObj = this.Context.GetAll<ManagementAccount>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ManagementAccountDto> Find(Expression<Func<ManagementAccount, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<ManagementAccount> oaObjects = this.Context.GetAll<ManagementAccount>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<ManagementAccount> GetQueryable()
		{    
		    IQueryable<ManagementAccount> oaObjects = this.Context.GetAll<ManagementAccount>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<ManagementAccount, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<ManagementAccount>().Count(expression);
		
		    return count;
		}
		
		internal static ManagementAccount CreateInternal(ManagementAccountDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ManagementAccount oaObj = new ManagementAccount();
		
			oaObj.UserName = dtObj.UserName;
			oaObj.SecurityUserId = dtObj.SecurityUserId;
			oaObj.PersonelCode = dtObj.PersonelCode;
			oaObj.Password = dtObj.Password;
			oaObj.ManagementRoleId = dtObj.ManagementRoleId;
			oaObj.ManagementAccountId = dtObj.ManagementAccountId;
			oaObj.ExpireDate = dtObj.ExpireDate;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public ManagementAccount Create(ManagementAccountDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static ManagementAccount UpdateOrCreateInternal(ManagementAccountDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ManagementAccount oaObj = (from t in context.GetAll<ManagementAccount>() where
							t.ManagementAccountId == dtObj.ManagementAccountId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UserName = dtObj.UserName;
			oaObj.SecurityUserId = dtObj.SecurityUserId;
			oaObj.PersonelCode = dtObj.PersonelCode;
			oaObj.Password = dtObj.Password;
			oaObj.ManagementRoleId = dtObj.ManagementRoleId;
			oaObj.ExpireDate = dtObj.ExpireDate;
			return oaObj;
		}
		
		public ManagementAccount UpdateOrCreate(ManagementAccountDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ManagementAccountDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			ManagementAccount oaObj = (from t in this.Context.GetAll<ManagementAccount>() where
								t.ManagementAccountId == dtObj.ManagementAccountId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ManagementAccountDto GetDto(ManagementAccount oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ManagementAccountDto dtObj = new ManagementAccountDto();
			dtObj.UserName = oaObj.UserName;
			dtObj.SecurityUserId = oaObj.SecurityUserId;
			dtObj.PersonelCode = oaObj.PersonelCode;
			dtObj.Password = oaObj.Password;
			dtObj.ManagementRoleId = oaObj.ManagementRoleId;
			dtObj.ManagementAccountId = oaObj.ManagementAccountId;
			dtObj.ExpireDate = oaObj.ExpireDate;
			
			return dtObj;
		}
		
		public static IList<ManagementAccountDto> GetDtos(IQueryable<ManagementAccount> oaObjects)
		{
			IList<ManagementAccountDto> dtObjects = new List<ManagementAccountDto>();
			foreach(ManagementAccount oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class LoginTypeRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<LoginType, LoginTypeDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public LoginTypeDto FindSingle(Expression<Func<LoginType, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    LoginType oaObj = this.Context.GetAll<LoginType>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<LoginTypeDto> Find(Expression<Func<LoginType, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<LoginType> oaObjects = this.Context.GetAll<LoginType>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<LoginType> GetQueryable()
		{    
		    IQueryable<LoginType> oaObjects = this.Context.GetAll<LoginType>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<LoginType, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<LoginType>().Count(expression);
		
		    return count;
		}
		
		internal static LoginType CreateInternal(LoginTypeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			LoginType oaObj = new LoginType();
		
			oaObj.Title = dtObj.Title;
			oaObj.LoginTypeId = dtObj.LoginTypeId;
			oaObj.Description = dtObj.Description;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public LoginType Create(LoginTypeDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static LoginType UpdateOrCreateInternal(LoginTypeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			LoginType oaObj = (from t in context.GetAll<LoginType>() where
							t.LoginTypeId == dtObj.LoginTypeId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			oaObj.Description = dtObj.Description;
			return oaObj;
		}
		
		public LoginType UpdateOrCreate(LoginTypeDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(LoginTypeDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			LoginType oaObj = (from t in this.Context.GetAll<LoginType>() where
								t.LoginTypeId == dtObj.LoginTypeId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static LoginTypeDto GetDto(LoginType oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			LoginTypeDto dtObj = new LoginTypeDto();
			dtObj.Title = oaObj.Title;
			dtObj.LoginTypeId = oaObj.LoginTypeId;
			dtObj.Description = oaObj.Description;
			
			return dtObj;
		}
		
		public static IList<LoginTypeDto> GetDtos(IQueryable<LoginType> oaObjects)
		{
			IList<LoginTypeDto> dtObjects = new List<LoginTypeDto>();
			foreach(LoginType oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class GroupToGroupRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<GroupToGroup, GroupToGroupDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public GroupToGroupDto FindSingle(Expression<Func<GroupToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    GroupToGroup oaObj = this.Context.GetAll<GroupToGroup>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<GroupToGroupDto> Find(Expression<Func<GroupToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<GroupToGroup> oaObjects = this.Context.GetAll<GroupToGroup>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<GroupToGroup> GetQueryable()
		{    
		    IQueryable<GroupToGroup> oaObjects = this.Context.GetAll<GroupToGroup>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<GroupToGroup, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<GroupToGroup>().Count(expression);
		
		    return count;
		}
		
		internal static GroupToGroup CreateInternal(GroupToGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			GroupToGroup oaObj = new GroupToGroup();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ParentGroupId = dtObj.ParentGroupId;
			oaObj.ChildGroupId = dtObj.ChildGroupId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.GgId = dtObj.GgId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public GroupToGroup Create(GroupToGroupDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static GroupToGroup UpdateOrCreateInternal(GroupToGroupDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			GroupToGroup oaObj = (from t in context.GetAll<GroupToGroup>() where
							t.GgId == dtObj.GgId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.ParentGroupId = dtObj.ParentGroupId;
			oaObj.ChildGroupId = dtObj.ChildGroupId;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			return oaObj;
		}
		
		public GroupToGroup UpdateOrCreate(GroupToGroupDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(GroupToGroupDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			GroupToGroup oaObj = (from t in this.Context.GetAll<GroupToGroup>() where
								t.GgId == dtObj.GgId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static GroupToGroupDto GetDto(GroupToGroup oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			GroupToGroupDto dtObj = new GroupToGroupDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.ParentGroupId = oaObj.ParentGroupId;
			dtObj.ChildGroupId = oaObj.ChildGroupId;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.GgId = oaObj.GgId;
			
			return dtObj;
		}
		
		public static IList<GroupToGroupDto> GetDtos(IQueryable<GroupToGroup> oaObjects)
		{
			IList<GroupToGroupDto> dtObjects = new List<GroupToGroupDto>();
			foreach(GroupToGroup oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class CompanyRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Company, CompanyDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public CompanyDto FindSingle(Expression<Func<Company, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Company oaObj = this.Context.GetAll<Company>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<CompanyDto> Find(Expression<Func<Company, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Company> oaObjects = this.Context.GetAll<Company>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Company> GetQueryable()
		{    
		    IQueryable<Company> oaObjects = this.Context.GetAll<Company>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Company, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Company>().Count(expression);
		
		    return count;
		}
		
		internal static Company CreateInternal(CompanyDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Company oaObj = new Company();
		
			oaObj.CompanyId = dtObj.CompanyId;
			oaObj.NationalNo = dtObj.NationalNo;
			oaObj.HasPersonel = dtObj.HasPersonel;
			oaObj.Name = dtObj.Name;
			oaObj.RegisterNo = dtObj.RegisterNo;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Company Create(CompanyDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Company UpdateOrCreateInternal(CompanyDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Company oaObj = (from t in context.GetAll<Company>() where
							t.CompanyId == dtObj.CompanyId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.NationalNo = dtObj.NationalNo;
			oaObj.HasPersonel = dtObj.HasPersonel;
			oaObj.Name = dtObj.Name;
			oaObj.RegisterNo = dtObj.RegisterNo;
			return oaObj;
		}
		
		public Company UpdateOrCreate(CompanyDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(CompanyDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Company oaObj = (from t in this.Context.GetAll<Company>() where
								t.CompanyId == dtObj.CompanyId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static CompanyDto GetDto(Company oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			CompanyDto dtObj = new CompanyDto();
			dtObj.CompanyId = oaObj.CompanyId;
			dtObj.NationalNo = oaObj.NationalNo;
			dtObj.HasPersonel = oaObj.HasPersonel;
			dtObj.Name = oaObj.Name;
			dtObj.RegisterNo = oaObj.RegisterNo;
			
			return dtObj;
		}
		
		public static IList<CompanyDto> GetDtos(IQueryable<Company> oaObjects)
		{
			IList<CompanyDto> dtObjects = new List<CompanyDto>();
			foreach(Company oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class ApplicationDomainRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<ApplicationDomain, ApplicationDomainDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ApplicationDomainDto FindSingle(Expression<Func<ApplicationDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    ApplicationDomain oaObj = this.Context.GetAll<ApplicationDomain>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ApplicationDomainDto> Find(Expression<Func<ApplicationDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<ApplicationDomain> oaObjects = this.Context.GetAll<ApplicationDomain>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<ApplicationDomain> GetQueryable()
		{    
		    IQueryable<ApplicationDomain> oaObjects = this.Context.GetAll<ApplicationDomain>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<ApplicationDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<ApplicationDomain>().Count(expression);
		
		    return count;
		}
		
		internal static ApplicationDomain CreateInternal(ApplicationDomainDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ApplicationDomain oaObj = new ApplicationDomain();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Title = dtObj.Title;
			oaObj.LoginTypeId = dtObj.LoginTypeId;
			oaObj.Locked = dtObj.Locked;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.ApplicationDomainId = dtObj.ApplicationDomainId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public ApplicationDomain Create(ApplicationDomainDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static ApplicationDomain UpdateOrCreateInternal(ApplicationDomainDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			ApplicationDomain oaObj = (from t in context.GetAll<ApplicationDomain>() where
							t.ApplicationDomainId == dtObj.ApplicationDomainId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.Title = dtObj.Title;
			oaObj.LoginTypeId = dtObj.LoginTypeId;
			oaObj.Locked = dtObj.Locked;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.Enabled = dtObj.Enabled;
			return oaObj;
		}
		
		public ApplicationDomain UpdateOrCreate(ApplicationDomainDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ApplicationDomainDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			ApplicationDomain oaObj = (from t in this.Context.GetAll<ApplicationDomain>() where
								t.ApplicationDomainId == dtObj.ApplicationDomainId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ApplicationDomainDto GetDto(ApplicationDomain oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ApplicationDomainDto dtObj = new ApplicationDomainDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.Title = oaObj.Title;
			dtObj.LoginTypeId = oaObj.LoginTypeId;
			dtObj.Locked = oaObj.Locked;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.ApplicationDomainId = oaObj.ApplicationDomainId;
			
			return dtObj;
		}
		
		public static IList<ApplicationDomainDto> GetDtos(IQueryable<ApplicationDomain> oaObjects)
		{
			IList<ApplicationDomainDto> dtObjects = new List<ApplicationDomainDto>();
			foreach(ApplicationDomain oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class AccountToAppDomainRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<AccountToAppDomain, AccountToAppDomainDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public AccountToAppDomainDto FindSingle(Expression<Func<AccountToAppDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    AccountToAppDomain oaObj = this.Context.GetAll<AccountToAppDomain>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<AccountToAppDomainDto> Find(Expression<Func<AccountToAppDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<AccountToAppDomain> oaObjects = this.Context.GetAll<AccountToAppDomain>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<AccountToAppDomain> GetQueryable()
		{    
		    IQueryable<AccountToAppDomain> oaObjects = this.Context.GetAll<AccountToAppDomain>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<AccountToAppDomain, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<AccountToAppDomain>().Count(expression);
		
		    return count;
		}
		
		internal static AccountToAppDomain CreateInternal(AccountToAppDomainDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			AccountToAppDomain oaObj = new AccountToAppDomain();
		
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.ExpireDate = dtObj.ExpireDate;
			oaObj.AppDomainId = dtObj.AppDomainId;
			oaObj.AccountId = dtObj.AccountId;
			oaObj.AccAapdomainId = dtObj.AccAapdomainId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public AccountToAppDomain Create(AccountToAppDomainDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static AccountToAppDomain UpdateOrCreateInternal(AccountToAppDomainDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			AccountToAppDomain oaObj = (from t in context.GetAll<AccountToAppDomain>() where
							t.AccAapdomainId == dtObj.AccAapdomainId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.ExpireDate = dtObj.ExpireDate;
			oaObj.AppDomainId = dtObj.AppDomainId;
			oaObj.AccountId = dtObj.AccountId;
			return oaObj;
		}
		
		public AccountToAppDomain UpdateOrCreate(AccountToAppDomainDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(AccountToAppDomainDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			AccountToAppDomain oaObj = (from t in this.Context.GetAll<AccountToAppDomain>() where
								t.AccAapdomainId == dtObj.AccAapdomainId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static AccountToAppDomainDto GetDto(AccountToAppDomain oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			AccountToAppDomainDto dtObj = new AccountToAppDomainDto();
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.ExpireDate = oaObj.ExpireDate;
			dtObj.AppDomainId = oaObj.AppDomainId;
			dtObj.AccountId = oaObj.AccountId;
			dtObj.AccAapdomainId = oaObj.AccAapdomainId;
			
			return dtObj;
		}
		
		public static IList<AccountToAppDomainDto> GetDtos(IQueryable<AccountToAppDomain> oaObjects)
		{
			IList<AccountToAppDomainDto> dtObjects = new List<AccountToAppDomainDto>();
			foreach(AccountToAppDomain oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.SM.Model	
{
	public partial class AccountRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Account, AccountDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public AccountDto FindSingle(Expression<Func<Account, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Account oaObj = this.Context.GetAll<Account>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<AccountDto> Find(Expression<Func<Account, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Account> oaObjects = this.Context.GetAll<Account>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Account> GetQueryable()
		{    
		    IQueryable<Account> oaObjects = this.Context.GetAll<Account>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Account, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Account>().Count(expression);
		
		    return count;
		}
		
		internal static Account CreateInternal(AccountDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Account oaObj = new Account();
		
			oaObj.Username = dtObj.Username;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.Password = dtObj.Password;
			oaObj.PassChangeDateFa = dtObj.PassChangeDateFa;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.ExpiredDateFa = dtObj.ExpiredDateFa;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.Description = dtObj.Description;
			oaObj.AccountId = dtObj.AccountId;
			oaObj.CreateDateFa = dtObj.CreateDateFa;
			oaObj.PassChangeDate = dtObj.PassChangeDate;
			oaObj.ExpiredDate = dtObj.ExpiredDate;
			oaObj.CreateDate = dtObj.CreateDate;
			oaObj.Locked = dtObj.Locked;
			oaObj.IsActiveDirectory = dtObj.IsActiveDirectory;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Account Create(AccountDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Account UpdateOrCreateInternal(AccountDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Account oaObj = (from t in context.GetAll<Account>() where
							t.AccountId == dtObj.AccountId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Username = dtObj.Username;
			oaObj.UpdatePerId = dtObj.UpdatePerId;
			oaObj.UpdateDate = dtObj.UpdateDate;
			oaObj.UserId = dtObj.UserId;
			oaObj.Password = dtObj.Password;
			oaObj.PassChangeDateFa = dtObj.PassChangeDateFa;
			oaObj.InsertPerId = dtObj.InsertPerId;
			oaObj.InsertDate = dtObj.InsertDate;
			oaObj.ExpiredDateFa = dtObj.ExpiredDateFa;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.Description = dtObj.Description;
			oaObj.CreateDateFa = dtObj.CreateDateFa;
			oaObj.PassChangeDate = dtObj.PassChangeDate;
			oaObj.ExpiredDate = dtObj.ExpiredDate;
			oaObj.CreateDate = dtObj.CreateDate;
			oaObj.Locked = dtObj.Locked;
			oaObj.IsActiveDirectory = dtObj.IsActiveDirectory;
			return oaObj;
		}
		
		public Account UpdateOrCreate(AccountDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(AccountDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Account oaObj = (from t in this.Context.GetAll<Account>() where
								t.AccountId == dtObj.AccountId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static AccountDto GetDto(Account oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			AccountDto dtObj = new AccountDto();
			dtObj.Username = oaObj.Username;
			dtObj.UpdatePerId = oaObj.UpdatePerId;
			dtObj.UpdateDate = oaObj.UpdateDate;
			dtObj.UserId = oaObj.UserId;
			dtObj.Password = oaObj.Password;
			dtObj.PassChangeDateFa = oaObj.PassChangeDateFa;
			dtObj.InsertPerId = oaObj.InsertPerId;
			dtObj.InsertDate = oaObj.InsertDate;
			dtObj.ExpiredDateFa = oaObj.ExpiredDateFa;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.Description = oaObj.Description;
			dtObj.AccountId = oaObj.AccountId;
			dtObj.CreateDateFa = oaObj.CreateDateFa;
			dtObj.PassChangeDate = oaObj.PassChangeDate;
			dtObj.ExpiredDate = oaObj.ExpiredDate;
			dtObj.CreateDate = oaObj.CreateDate;
			dtObj.Locked = oaObj.Locked;
			dtObj.IsActiveDirectory = oaObj.IsActiveDirectory;
			
			return dtObj;
		}
		
		public static IList<AccountDto> GetDtos(IQueryable<Account> oaObjects)
		{
			IList<AccountDto> dtObjects = new List<AccountDto>();
			foreach(Account oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}
#pragma warning restore 1591
